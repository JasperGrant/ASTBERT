{
    "addDependencyJars": [
        "program -> expression_statement -> method_invocation -> JarUtils",
        "program -> expression_statement -> method_invocation -> addDependencyJars",
        "program -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> Collections",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> type_arguments -> generic_type -> Class",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> type_arguments -> generic_type -> type_arguments -> wildcard",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> singletonList",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> getClass",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> argument_list"
    ],
    "addIndexCol": [
        "program -> expression_statement -> method_invocation -> colMap",
        "program -> expression_statement -> method_invocation -> put",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> encode",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> cf",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> cq",
        "program -> expression_statement -> method_invocation -> argument_list -> colType"
    ],
    "addIterators": [
        "program -> enhanced_for_statement -> IteratorSetting",
        "program -> enhanced_for_statement -> is",
        "program -> enhanced_for_statement -> iterators",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> AccumuloInputFormat",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> addIterator",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> is"
    ],
    "addTable": [
        "program -> if_statement -> parenthesized_expression -> field_access -> this.simulate",
        "program -> if_statement -> parenthesized_expression -> field_access -> this.simulate",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> LOG",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> info",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> \"Simulating adding table: {}\"",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> tableName",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> LOG",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> debug",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> \"Adding table: {}\"",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> tableName",
        "program -> if_statement -> block -> local_variable_declaration -> BatchWriter",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> bw",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> null",
        "program -> if_statement -> block -> local_variable_declaration -> String",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> table",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> tableName",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> toString",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> field_access -> this.createTables",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> field_access -> this.createTables",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> method_invocation -> field_access -> this.conn",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> method_invocation -> field_access -> this.conn",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> method_invocation -> tableOperations",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> exists",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> argument_list -> table",
        "program -> if_statement -> block -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> method_invocation -> field_access -> this.conn",
        "program -> if_statement -> block -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> method_invocation -> field_access -> this.conn",
        "program -> if_statement -> block -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> method_invocation -> tableOperations",
        "program -> if_statement -> block -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> create",
        "program -> if_statement -> block -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> table",
        "program -> if_statement -> block -> if_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> AccumuloSecurityException",
        "program -> if_statement -> block -> if_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> var8",
        "program -> if_statement -> block -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> LOG",
        "program -> if_statement -> block -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> error",
        "program -> if_statement -> block -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> \"Accumulo security violation creating {}\"",
        "program -> if_statement -> block -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> table",
        "program -> if_statement -> block -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> var8",
        "program -> if_statement -> block -> if_statement -> block -> try_statement -> catch_clause -> block -> throw_statement -> var8",
        "program -> if_statement -> block -> if_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> TableExistsException",
        "program -> if_statement -> block -> if_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> var9",
        "program -> if_statement -> block -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> LOG",
        "program -> if_statement -> block -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> warn",
        "program -> if_statement -> block -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> \"Table Exists {}\"",
        "program -> if_statement -> block -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> table",
        "program -> if_statement -> block -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> var9",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> bw",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> field_access -> this.mtbw",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> field_access -> this.mtbw",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> getBatchWriter",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> table",
        "program -> if_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> TableNotFoundException",
        "program -> if_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> var5",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> LOG",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> error",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> \"Accumulo table {} doesn't exist and cannot be created.\"",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> table",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> var5",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> AccumuloException",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> var5",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> bw",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> field_access -> this.bws",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> field_access -> this.bws",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> put",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> tableName",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> bw"
    ],
    "addTokenFromUserToJobConf": [
        "program -> expression_statement -> method_invocation -> checkNotNull",
        "program -> expression_statement -> method_invocation -> argument_list -> user",
        "program -> expression_statement -> method_invocation -> argument_list -> \"Provided UGI was null\"",
        "program -> expression_statement -> method_invocation -> checkNotNull",
        "program -> expression_statement -> method_invocation -> argument_list -> jobConf",
        "program -> expression_statement -> method_invocation -> argument_list -> \"JobConf was null\"",
        "program -> local_variable_declaration -> generic_type -> Token",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> wildcard",
        "program -> local_variable_declaration -> variable_declarator -> accumuloToken",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getAccumuloToken",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> user",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> accumuloToken",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> log",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> error",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> \"Could not find accumulo token in user: \"",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> user",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> getTokens",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> IOException",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> \"Could not find Accumulo Token in user's tokens\"",
        "program -> expression_statement -> method_invocation -> mergeTokenIntoJobConf",
        "program -> expression_statement -> method_invocation -> argument_list -> jobConf",
        "program -> expression_statement -> method_invocation -> argument_list -> accumuloToken"
    ],
    "add": [
        "program -> expression_statement -> method_invocation -> Preconditions",
        "program -> expression_statement -> method_invocation -> checkArgument",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> method_invocation -> schema",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> method_invocation -> columns",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> size",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> field_access -> values.length",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> field_access -> values.length",
        "program -> local_variable_declaration -> GenericRecord",
        "program -> local_variable_declaration -> variable_declarator -> record",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> GenericRecord",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> create",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> schema",
        "program -> for_statement -> local_variable_declaration -> integral_type",
        "program -> for_statement -> local_variable_declaration -> variable_declarator -> i",
        "program -> for_statement -> local_variable_declaration -> variable_declarator -> 0",
        "program -> for_statement -> binary_expression -> i",
        "program -> for_statement -> binary_expression -> field_access -> values.length",
        "program -> for_statement -> binary_expression -> field_access -> values.length",
        "program -> for_statement -> update_expression -> i",
        "program -> for_statement -> block -> expression_statement -> method_invocation -> record",
        "program -> for_statement -> block -> expression_statement -> method_invocation -> set",
        "program -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> i",
        "program -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> array_access -> values",
        "program -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> array_access -> i",
        "program -> expression_statement -> method_invocation -> records",
        "program -> expression_statement -> method_invocation -> add",
        "program -> expression_statement -> method_invocation -> argument_list -> record",
        "program -> return_statement -> this"
    ],
    "checkOutputSpecs": [
        ""
    ],
    "clear": [
        "program -> expression_statement -> method_invocation -> hookList",
        "program -> expression_statement -> method_invocation -> clear",
        "program -> expression_statement -> method_invocation -> argument_list"
    ],
    "commitCreateTable": [
        "program -> if_statement -> parenthesized_expression -> binary_expression -> icebergTable",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> setFileFormat",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> catalogProperties",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getProperty",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> TableProperties.DEFAULT_FILE_FORMAT",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> TableProperties.DEFAULT_FILE_FORMAT",
        "program -> if_statement -> block -> local_variable_declaration -> String",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> metadataLocation",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> hmsTable",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> getParameters",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> get",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> BaseMetastoreTableOperations.METADATA_LOCATION_PROP",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> BaseMetastoreTableOperations.METADATA_LOCATION_PROP",
        "program -> if_statement -> block -> local_variable_declaration -> Table",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> table",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> metadataLocation",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> table",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> Catalogs",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> registerTable",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> conf",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> catalogProperties",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> metadataLocation",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> table",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> Catalogs",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> createTable",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> conf",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> catalogProperties",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> HiveTableUtil",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> isCtas",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> argument_list -> catalogProperties",
        "program -> if_statement -> block -> if_statement -> block -> return_statement",
        "program -> if_statement -> block -> local_variable_declaration -> String",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> tableIdentifier",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> catalogProperties",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> getProperty",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> Catalogs.NAME",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> Catalogs.NAME",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> SessionStateUtil",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> addResource",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> InputFormatConfig.CTAS_TABLE_NAME",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> InputFormatConfig.CTAS_TABLE_NAME",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> tableIdentifier",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> SessionStateUtil",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> addResource",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> tableIdentifier",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> table",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> HiveTableUtil",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> createFileForTableObject",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> table",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> conf"
    ],
    "commitDropTable": [
        "program -> if_statement -> parenthesized_expression -> binary_expression -> deleteData",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> deleteIcebergTable",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> Catalogs",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> hiveCatalog",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> argument_list -> conf",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> argument_list -> catalogProperties",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> LOG",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> info",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> \"Dropping with purge all the data for table {}.{}\"",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> hmsTable",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getDbName",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> hmsTable",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getTableName",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> Catalogs",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> dropTable",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> catalogProperties",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> deleteMetadata",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> null",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> method_invocation -> deleteIo",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> method_invocation -> newInputFile",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> method_invocation -> argument_list -> method_invocation -> deleteMetadata",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> method_invocation -> argument_list -> method_invocation -> location",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> exists",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> CatalogUtil",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> dropTableData",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> deleteIo",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> deleteMetadata",
        "program -> if_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> Exception",
        "program -> if_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> LOG",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> warn",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> \"Exception during commitDropTable operation for table {}.{}.\"",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> hmsTable",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getDbName",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> hmsTable",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getTableName",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> e"
    ],
    "configureAccumuloOutputFormat": [
        "program -> local_variable_declaration -> AccumuloConnectionParameters",
        "program -> local_variable_declaration -> variable_declarator -> cnxnParams",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getConnectionParams",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> job",
        "program -> local_variable_declaration -> modifiers",
        "program -> local_variable_declaration -> String",
        "program -> local_variable_declaration -> variable_declarator -> tableName",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> job",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> get",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloSerDeParameters.TABLE_NAME",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloSerDeParameters.TABLE_NAME",
        "program -> expression_statement -> method_invocation -> Preconditions",
        "program -> expression_statement -> method_invocation -> checkNotNull",
        "program -> expression_statement -> method_invocation -> argument_list -> tableName",
        "program -> expression_statement -> method_invocation -> argument_list -> \"Expected Accumulo table name to be provided in job configuration\"",
        "program -> try_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> cnxnParams",
        "program -> try_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> useMockInstance",
        "program -> try_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> argument_list",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> getHelper",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> argument_list",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> setOutputFormatMockInstance",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> job",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> cnxnParams",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getAccumuloInstanceName",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> getHelper",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> argument_list",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> setOutputFormatZooKeeperInstance",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> job",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> cnxnParams",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getAccumuloInstanceName",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> cnxnParams",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getZooKeepers",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> cnxnParams",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> useSasl",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> try_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> cnxnParams",
        "program -> try_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> useSasl",
        "program -> try_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> argument_list",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> getHelper",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> argument_list",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> updateOutputFormatConfWithAccumuloToken",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> job",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getCurrentUser",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> cnxnParams",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> getHelper",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> argument_list",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> setOutputFormatConnectorInfo",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> job",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> cnxnParams",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getAccumuloUserName",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> object_creation_expression -> PasswordToken",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> object_creation_expression -> argument_list -> method_invocation -> cnxnParams",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> object_creation_expression -> argument_list -> method_invocation -> getAccumuloPassword",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> object_creation_expression -> argument_list -> method_invocation -> argument_list",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> setDefaultAccumuloTableName",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> job",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> tableName",
        "program -> try_statement -> block -> local_variable_declaration -> modifiers",
        "program -> try_statement -> block -> local_variable_declaration -> String",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> indexTableName",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> job",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> get",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloIndexParameters.INDEXTABLE_NAME",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloIndexParameters.INDEXTABLE_NAME",
        "program -> try_statement -> block -> local_variable_declaration -> modifiers",
        "program -> try_statement -> block -> local_variable_declaration -> String",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> indexedColumns",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> job",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> get",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloIndexParameters.INDEXED_COLUMNS",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloIndexParameters.INDEXED_COLUMNS",
        "program -> try_statement -> block -> local_variable_declaration -> modifiers",
        "program -> try_statement -> block -> local_variable_declaration -> String",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> columnTypes",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> job",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> get",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> serdeConstants.LIST_COLUMN_TYPES",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> serdeConstants.LIST_COLUMN_TYPES",
        "program -> try_statement -> block -> local_variable_declaration -> modifiers",
        "program -> try_statement -> block -> local_variable_declaration -> boolean",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> binaryEncoding",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> field_access -> ColumnEncoding.BINARY",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> field_access -> ColumnEncoding.BINARY",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> getName",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> equalsIgnoreCase",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> method_invocation -> job",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> method_invocation -> get",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> AccumuloSerDeParameters.DEFAULT_STORAGE_TYPE",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> AccumuloSerDeParameters.DEFAULT_STORAGE_TYPE",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> setAccumuloIndexTableName",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> job",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> indexTableName",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> setAccumuloIndexColumns",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> job",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> indexedColumns",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> setAccumuloStringEncoding",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> job",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> unary_expression -> binaryEncoding",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> AccumuloSecurityException",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> log",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> error",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> \"Could not connect to Accumulo with provided credentials\"",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> e",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> IOException",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> e"
    ],
    "configureInputJobProperties": [
        "program -> expression_statement -> method_invocation -> overlayTableProperties",
        "program -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> expression_statement -> method_invocation -> argument_list -> tableDesc",
        "program -> expression_statement -> method_invocation -> argument_list -> map",
        "program -> expression_statement -> method_invocation -> fallbackToNonVectorizedModeBasedOnProperties",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> tableDesc",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getProperties",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> boolean",
        "program -> local_variable_declaration -> variable_declarator -> allowDataFilesWithinTableLocationOnly",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> conf",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getBoolean",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> field_access -> field_access -> HiveConf.ConfVars.HIVE_ICEBERG_ALLOW_DATAFILES_IN_TABLE_LOCATION_ONLY.varname",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> field_access -> field_access -> HiveConf.ConfVars.HIVE_ICEBERG_ALLOW_DATAFILES_IN_TABLE_LOCATION_ONLY.varname",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> field_access -> HiveConf.ConfVars.HIVE_ICEBERG_ALLOW_DATAFILES_IN_TABLE_LOCATION_ONLY.varname",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> HiveConf.ConfVars.HIVE_ICEBERG_ALLOW_DATAFILES_IN_TABLE_LOCATION_ONLY.varname",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> field_access -> field_access -> HiveConf.ConfVars.HIVE_ICEBERG_ALLOW_DATAFILES_IN_TABLE_LOCATION_ONLY.defaultBoolVal",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> field_access -> field_access -> HiveConf.ConfVars.HIVE_ICEBERG_ALLOW_DATAFILES_IN_TABLE_LOCATION_ONLY.defaultBoolVal",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> field_access -> HiveConf.ConfVars.HIVE_ICEBERG_ALLOW_DATAFILES_IN_TABLE_LOCATION_ONLY.defaultBoolVal",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> HiveConf.ConfVars.HIVE_ICEBERG_ALLOW_DATAFILES_IN_TABLE_LOCATION_ONLY.defaultBoolVal",
        "program -> expression_statement -> method_invocation -> map",
        "program -> expression_statement -> method_invocation -> put",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> field_access -> field_access -> HiveConf.ConfVars.HIVE_ICEBERG_ALLOW_DATAFILES_IN_TABLE_LOCATION_ONLY.varname",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> field_access -> field_access -> HiveConf.ConfVars.HIVE_ICEBERG_ALLOW_DATAFILES_IN_TABLE_LOCATION_ONLY.varname",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> field_access -> HiveConf.ConfVars.HIVE_ICEBERG_ALLOW_DATAFILES_IN_TABLE_LOCATION_ONLY.varname",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> HiveConf.ConfVars.HIVE_ICEBERG_ALLOW_DATAFILES_IN_TABLE_LOCATION_ONLY.varname",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> String",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> valueOf",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> allowDataFilesWithinTableLocationOnly"
    ],
    "configureJobConf": [
        "program -> expression_statement -> method_invocation -> setCommonJobConf",
        "program -> expression_statement -> method_invocation -> argument_list -> jobConf",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> binary_expression -> tableDesc",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> binary_expression -> null",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> tableDesc",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> getProperties",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> binary_expression -> null",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> method_invocation -> tableDesc",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> method_invocation -> getProperties",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> get",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list -> binary_expression -> field_access -> InputFormatConfig.OPERATION_TYPE_PREFIX",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list -> binary_expression -> field_access -> InputFormatConfig.OPERATION_TYPE_PREFIX",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list -> binary_expression -> method_invocation -> tableDesc",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list -> binary_expression -> method_invocation -> getTableName",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list -> binary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> null",
        "program -> if_statement -> block -> local_variable_declaration -> String",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> tableName",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> tableDesc",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> getTableName",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> if_statement -> block -> local_variable_declaration -> String",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> opKey",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> binary_expression -> field_access -> InputFormatConfig.OPERATION_TYPE_PREFIX",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> binary_expression -> field_access -> InputFormatConfig.OPERATION_TYPE_PREFIX",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> binary_expression -> tableName",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> jobConf",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> set",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> opKey",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> tableDesc",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> getProperties",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getProperty",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> opKey",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> Preconditions",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> checkArgument",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> unary_expression -> method_invocation -> tableName",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> unary_expression -> method_invocation -> contains",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> unary_expression -> method_invocation -> argument_list -> TABLE_NAME_SEPARATOR",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> \"Can not handle table \"",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> tableName",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> binary_expression -> \". Its name contains '\"",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> TABLE_NAME_SEPARATOR",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> \"'\"",
        "program -> if_statement -> block -> local_variable_declaration -> String",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> tables",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> jobConf",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> get",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> InputFormatConfig.OUTPUT_TABLES",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> InputFormatConfig.OUTPUT_TABLES",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> tables",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> ternary_expression -> binary_expression -> tables",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> ternary_expression -> binary_expression -> null",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> ternary_expression -> tableName",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> ternary_expression -> binary_expression -> binary_expression -> tables",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> ternary_expression -> binary_expression -> binary_expression -> TABLE_NAME_SEPARATOR",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> ternary_expression -> binary_expression -> tableName",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> jobConf",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> set",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> InputFormatConfig.OUTPUT_TABLES",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> InputFormatConfig.OUTPUT_TABLES",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> tables",
        "program -> if_statement -> block -> local_variable_declaration -> String",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> catalogName",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> tableDesc",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> getProperties",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> getProperty",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> InputFormatConfig.CATALOG_NAME",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> InputFormatConfig.CATALOG_NAME",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> catalogName",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> jobConf",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> set",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> field_access -> InputFormatConfig.TABLE_CATALOG_PREFIX",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> field_access -> InputFormatConfig.TABLE_CATALOG_PREFIX",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> tableName",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> catalogName",
        "program -> try_statement -> block -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> jobConf",
        "program -> try_statement -> block -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> getBoolean",
        "program -> try_statement -> block -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> argument_list -> field_access -> field_access -> field_access -> HiveConf.ConfVars.HIVE_IN_TEST_IDE.varname",
        "program -> try_statement -> block -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> argument_list -> field_access -> field_access -> field_access -> HiveConf.ConfVars.HIVE_IN_TEST_IDE.varname",
        "program -> try_statement -> block -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> argument_list -> field_access -> field_access -> HiveConf.ConfVars.HIVE_IN_TEST_IDE.varname",
        "program -> try_statement -> block -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> argument_list -> field_access -> HiveConf.ConfVars.HIVE_IN_TEST_IDE.varname",
        "program -> try_statement -> block -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> argument_list -> false",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> Utilities",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> addDependencyJars",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> jobConf",
        "program -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> class_literal -> HiveIcebergStorageHandler",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> IOException",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> Throwables",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> propagate",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> e"
    ],
    "configureOutputJobProperties": [
        "program -> expression_statement -> method_invocation -> overlayTableProperties",
        "program -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> expression_statement -> method_invocation -> argument_list -> tableDesc",
        "program -> expression_statement -> method_invocation -> argument_list -> map",
        "program -> expression_statement -> method_invocation -> fallbackToNonVectorizedModeBasedOnProperties",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> tableDesc",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getProperties",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> map",
        "program -> expression_statement -> method_invocation -> put",
        "program -> expression_statement -> method_invocation -> argument_list -> \"mapred.output.committer.class\"",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> class_literal -> HiveIcebergNoJobCommitter",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getName",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> String",
        "program -> local_variable_declaration -> variable_declarator -> opType",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getOperationType",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> map",
        "program -> expression_statement -> method_invocation -> put",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> field_access -> InputFormatConfig.OPERATION_TYPE_PREFIX",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> field_access -> InputFormatConfig.OPERATION_TYPE_PREFIX",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> tableDesc",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> getTableName",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> argument_list -> opType",
        "program -> expression_statement -> method_invocation -> method_invocation -> tableDesc",
        "program -> expression_statement -> method_invocation -> method_invocation -> getProperties",
        "program -> expression_statement -> method_invocation -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> put",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> field_access -> InputFormatConfig.OPERATION_TYPE_PREFIX",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> field_access -> InputFormatConfig.OPERATION_TYPE_PREFIX",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> tableDesc",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> getTableName",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> argument_list -> opType"
    ],
    "configure": [
        "program -> expression_statement -> method_invocation -> job",
        "program -> expression_statement -> method_invocation -> setInputFormatClass",
        "program -> expression_statement -> method_invocation -> argument_list -> class_literal -> IcebergInputFormat",
        "program -> return_statement -> object_creation_expression -> scoped_type_identifier -> InputFormatConfig",
        "program -> return_statement -> object_creation_expression -> scoped_type_identifier -> ConfigBuilder",
        "program -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> job",
        "program -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> getConfiguration",
        "program -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> argument_list"
    ],
    "contains": [
        "program -> if_statement -> parenthesized_expression -> binary_expression -> interned",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> return_statement -> method_invocation -> interned",
        "program -> if_statement -> return_statement -> method_invocation -> contains",
        "program -> if_statement -> return_statement -> method_invocation -> argument_list -> value",
        "program -> if_statement -> return_statement -> method_invocation -> super",
        "program -> if_statement -> return_statement -> method_invocation -> contains",
        "program -> if_statement -> return_statement -> method_invocation -> argument_list -> value"
    ],
    "cOpKeyset": [
        "program -> return_statement -> method_invocation -> compareOps",
        "program -> return_statement -> method_invocation -> keySet",
        "program -> return_statement -> method_invocation -> argument_list"
    ],
    "createColumnMap": [
        "program -> local_variable_declaration -> generic_type -> Map",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> String",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> String",
        "program -> local_variable_declaration -> variable_declarator -> colsMap",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> HashMap",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> type_arguments -> String",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> type_arguments -> String",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> local_variable_declaration -> String",
        "program -> local_variable_declaration -> variable_declarator -> accColString",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> conf",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> get",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloSerDeParameters.COLUMN_MAPPINGS",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloSerDeParameters.COLUMN_MAPPINGS",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> accColString",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> null",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> method_invocation -> accColString",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> method_invocation -> trim",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> isEmpty",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> block -> local_variable_declaration -> array_type -> String",
        "program -> if_statement -> block -> local_variable_declaration -> array_type -> dimensions",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> accCols",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> accColString",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> split",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> \",\"",
        "program -> if_statement -> block -> local_variable_declaration -> array_type -> String",
        "program -> if_statement -> block -> local_variable_declaration -> array_type -> dimensions",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> hiveCols",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> conf",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> get",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list -> field_access -> serdeConstants.LIST_COLUMNS",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list -> field_access -> serdeConstants.LIST_COLUMNS",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> split",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> \",\"",
        "program -> if_statement -> block -> for_statement -> local_variable_declaration -> integral_type",
        "program -> if_statement -> block -> for_statement -> local_variable_declaration -> variable_declarator -> i",
        "program -> if_statement -> block -> for_statement -> local_variable_declaration -> variable_declarator -> 0",
        "program -> if_statement -> block -> for_statement -> binary_expression -> i",
        "program -> if_statement -> block -> for_statement -> binary_expression -> field_access -> accCols.length",
        "program -> if_statement -> block -> for_statement -> binary_expression -> field_access -> accCols.length",
        "program -> if_statement -> block -> for_statement -> update_expression -> i",
        "program -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> colsMap",
        "program -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> put",
        "program -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> array_access -> hiveCols",
        "program -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> array_access -> i",
        "program -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> array_access -> accCols",
        "program -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> array_access -> i",
        "program -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> replace",
        "program -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> ':'",
        "program -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> '_'",
        "program -> return_statement -> colsMap"
    ],
    "createIndexDefinition": [
        "program -> local_variable_declaration -> AccumuloIndexDefinition",
        "program -> local_variable_declaration -> variable_declarator -> def",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> AccumuloIndexDefinition",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> tname",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> iname",
        "program -> local_variable_declaration -> String",
        "program -> local_variable_declaration -> variable_declarator -> cols",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> AccumuloIndexedOutputFormat",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getIndexColumns",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> job",
        "program -> expression_statement -> method_invocation -> LOG",
        "program -> expression_statement -> method_invocation -> info",
        "program -> expression_statement -> method_invocation -> argument_list -> \"Index Cols = {}\"",
        "program -> expression_statement -> method_invocation -> argument_list -> cols",
        "program -> expression_statement -> method_invocation -> def",
        "program -> expression_statement -> method_invocation -> setColumnTuples",
        "program -> expression_statement -> method_invocation -> argument_list -> cols",
        "program -> return_statement -> def"
    ],
    "createKey": [
        "program -> return_statement -> null"
    ],
    "createLazyField": [
        "program -> if_statement -> parenthesized_expression -> field_access -> array_access -> columnsMapping",
        "program -> if_statement -> parenthesized_expression -> field_access -> array_access -> fieldID",
        "program -> if_statement -> parenthesized_expression -> field_access -> columnsMapping[fieldID].hbaseRowKey",
        "program -> if_statement -> block -> return_statement -> method_invocation -> keyFactory",
        "program -> if_statement -> block -> return_statement -> method_invocation -> createKey",
        "program -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> method_invocation -> fieldRef",
        "program -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> method_invocation -> getFieldObjectInspector",
        "program -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> field_access -> array_access -> columnsMapping",
        "program -> if_statement -> parenthesized_expression -> field_access -> array_access -> fieldID",
        "program -> if_statement -> parenthesized_expression -> field_access -> columnsMapping[fieldID].hbaseTimestamp",
        "program -> if_statement -> block -> return_statement -> method_invocation -> LazyFactory",
        "program -> if_statement -> block -> return_statement -> method_invocation -> createLazyObject",
        "program -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> method_invocation -> fieldRef",
        "program -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> method_invocation -> getFieldObjectInspector",
        "program -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> valueFactories",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> block -> return_statement -> method_invocation -> method_invocation -> valueFactories",
        "program -> if_statement -> block -> return_statement -> method_invocation -> method_invocation -> get",
        "program -> if_statement -> block -> return_statement -> method_invocation -> method_invocation -> argument_list -> fieldID",
        "program -> if_statement -> block -> return_statement -> method_invocation -> createValueObject",
        "program -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> method_invocation -> fieldRef",
        "program -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> method_invocation -> getFieldObjectInspector",
        "program -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> return_statement -> method_invocation -> HBaseSerDeHelper",
        "program -> return_statement -> method_invocation -> createLazyField",
        "program -> return_statement -> method_invocation -> argument_list -> columnsMapping",
        "program -> return_statement -> method_invocation -> argument_list -> fieldID",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> fieldRef",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> getFieldObjectInspector",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list"
    ],
    "createRowIdObjectInspector": [
        "program -> return_statement -> method_invocation -> LazyFactory",
        "program -> return_statement -> method_invocation -> createLazyObjectInspector",
        "program -> return_statement -> method_invocation -> argument_list -> type",
        "program -> return_statement -> method_invocation -> argument_list -> array_creation_expression -> integral_type",
        "program -> return_statement -> method_invocation -> argument_list -> array_creation_expression -> dimensions",
        "program -> return_statement -> method_invocation -> argument_list -> array_creation_expression -> array_initializer -> separator",
        "program -> return_statement -> method_invocation -> argument_list -> 0",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> serdeParams",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> getNullSequence",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> serdeParams",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> isEscaped",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> serdeParams",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> getEscapeChar",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list"
    ],
    "createRowId": [
        "program -> local_variable_declaration -> LazyObjectBase",
        "program -> local_variable_declaration -> variable_declarator -> lazyObj",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> LazyFactory",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> createLazyObject",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> inspector",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> binary_expression -> field_access -> ColumnEncoding.BINARY",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> binary_expression -> field_access -> ColumnEncoding.BINARY",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> binary_expression -> method_invocation -> rowIdMapping",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> binary_expression -> method_invocation -> getEncoding",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> binary_expression -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> log",
        "program -> expression_statement -> method_invocation -> info",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> binary_expression -> \"Created \"",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> lazyObj",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> getClass",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> \" for rowId with inspector \"",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> inspector",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> getClass",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> argument_list",
        "program -> return_statement -> lazyObj"
    ],
    "createScanner": [
        "program -> local_variable_declaration -> AccumuloIndexScanner",
        "program -> local_variable_declaration -> variable_declarator -> handler",
        "program -> local_variable_declaration -> String",
        "program -> local_variable_declaration -> variable_declarator -> classname",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> conf",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> get",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> INDEX_SCANNER",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> classname",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> handler",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> cast_expression -> AccumuloIndexScanner",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> cast_expression -> method_invocation -> method_invocation -> Class",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> cast_expression -> method_invocation -> method_invocation -> forName",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> cast_expression -> method_invocation -> method_invocation -> argument_list -> classname",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> cast_expression -> method_invocation -> newInstance",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> cast_expression -> method_invocation -> argument_list",
        "program -> if_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> ClassCastException",
        "program -> if_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> InstantiationException",
        "program -> if_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> IllegalAccessException",
        "program -> if_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> ClassNotFoundException",
        "program -> if_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> AccumuloIndexScannerException",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"Cannot use index scanner class: \"",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> classname",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> e",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> handler",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> AccumuloDefaultIndexScanner",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> argument_list",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> handler",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> handler",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> init",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> return_statement -> handler"
    ],
    "createValue": [
        "program -> return_statement -> method_invocation -> method_invocation -> method_invocation -> LlapHiveUtils",
        "program -> return_statement -> method_invocation -> method_invocation -> method_invocation -> findMapWork",
        "program -> return_statement -> method_invocation -> method_invocation -> method_invocation -> argument_list -> job",
        "program -> return_statement -> method_invocation -> method_invocation -> getVectorizedRowBatchCtx",
        "program -> return_statement -> method_invocation -> method_invocation -> argument_list",
        "program -> return_statement -> method_invocation -> createVectorizedRowBatch",
        "program -> return_statement -> method_invocation -> argument_list"
    ],
    "decomposePredicate": [
        "program -> local_variable_declaration -> DecomposedPredicate",
        "program -> local_variable_declaration -> variable_declarator -> predicate",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> DecomposedPredicate",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> expression_statement -> assignment_expression -> field_access -> predicate.residualPredicate",
        "program -> expression_statement -> assignment_expression -> field_access -> predicate.residualPredicate",
        "program -> expression_statement -> assignment_expression -> cast_expression -> ExprNodeGenericFuncDesc",
        "program -> expression_statement -> assignment_expression -> cast_expression -> exprNodeDesc",
        "program -> local_variable_declaration -> ExprNodeDesc",
        "program -> local_variable_declaration -> variable_declarator -> pushedPredicate",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> exprNodeDesc",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> clone",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> generic_type -> List",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> ExprNodeDesc",
        "program -> local_variable_declaration -> variable_declarator -> subExprNodes",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> pushedPredicate",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getChildren",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> subExprNodes",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> removeIf",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> lambda_expression -> nodeDesc",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> lambda_expression -> binary_expression -> binary_expression -> method_invocation -> nodeDesc",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> lambda_expression -> binary_expression -> binary_expression -> method_invocation -> getCols",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> lambda_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> lambda_expression -> binary_expression -> binary_expression -> null",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> lambda_expression -> binary_expression -> method_invocation -> method_invocation -> nodeDesc",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> lambda_expression -> binary_expression -> method_invocation -> method_invocation -> getCols",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> lambda_expression -> binary_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> lambda_expression -> binary_expression -> method_invocation -> contains",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> lambda_expression -> binary_expression -> method_invocation -> argument_list -> method_invocation -> field_access -> VirtualColumn.FILE_PATH",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> lambda_expression -> binary_expression -> method_invocation -> argument_list -> method_invocation -> field_access -> VirtualColumn.FILE_PATH",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> lambda_expression -> binary_expression -> method_invocation -> argument_list -> method_invocation -> getName",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> lambda_expression -> binary_expression -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> subExprNodes",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> size",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> 1",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> pushedPredicate",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> subExprNodes",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> get",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> 0",
        "program -> if_statement -> block -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> subExprNodes",
        "program -> if_statement -> block -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> isEmpty",
        "program -> if_statement -> block -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> assignment_expression -> pushedPredicate",
        "program -> if_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> assignment_expression -> null",
        "program -> expression_statement -> assignment_expression -> field_access -> predicate.pushedPredicate",
        "program -> expression_statement -> assignment_expression -> field_access -> predicate.pushedPredicate",
        "program -> expression_statement -> assignment_expression -> cast_expression -> ExprNodeGenericFuncDesc",
        "program -> expression_statement -> assignment_expression -> cast_expression -> pushedPredicate",
        "program -> local_variable_declaration -> Expression",
        "program -> local_variable_declaration -> variable_declarator -> filterExpr",
        "program -> local_variable_declaration -> variable_declarator -> cast_expression -> Expression",
        "program -> local_variable_declaration -> variable_declarator -> cast_expression -> method_invocation -> HiveIcebergInputFormat",
        "program -> local_variable_declaration -> variable_declarator -> cast_expression -> method_invocation -> getFilterExpr",
        "program -> local_variable_declaration -> variable_declarator -> cast_expression -> method_invocation -> argument_list -> conf",
        "program -> local_variable_declaration -> variable_declarator -> cast_expression -> method_invocation -> argument_list -> field_access -> predicate.pushedPredicate",
        "program -> local_variable_declaration -> variable_declarator -> cast_expression -> method_invocation -> argument_list -> field_access -> predicate.pushedPredicate",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> filterExpr",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> SessionStateUtil",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> addResource",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> InputFormatConfig.QUERY_FILTERS",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> InputFormatConfig.QUERY_FILTERS",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> filterExpr",
        "program -> return_statement -> predicate"
    ],
    "decompose": [
        "program -> local_variable_declaration -> generic_type -> Map",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> String",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> generic_type -> List",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> generic_type -> type_arguments -> IndexSearchCondition",
        "program -> local_variable_declaration -> variable_declarator -> result",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> HashMap",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> type_arguments -> String",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> type_arguments -> generic_type -> List",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> type_arguments -> generic_type -> type_arguments -> IndexSearchCondition",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> enhanced_for_statement -> IndexSearchCondition",
        "program -> enhanced_for_statement -> condition",
        "program -> enhanced_for_statement -> searchConditions",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> generic_type -> List",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> generic_type -> type_arguments -> IndexSearchCondition",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> conditions",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> result",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> get",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> method_invocation -> method_invocation -> condition",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> method_invocation -> method_invocation -> getColumnDesc",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> method_invocation -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> method_invocation -> getColumn",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> conditions",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> conditions",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> generic_type -> ArrayList",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> generic_type -> type_arguments -> IndexSearchCondition",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> result",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> put",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> condition",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> getColumnDesc",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getColumn",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> conditions",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> conditions",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> add",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> condition",
        "program -> return_statement -> result"
    ],
    "encodeBinaryValue": [
        "program -> local_variable_declaration -> String",
        "program -> local_variable_declaration -> variable_declarator -> rawType",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getRawType",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> hiveType",
        "program -> switch_expression -> parenthesized_expression -> rawType",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.BOOLEAN_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.BOOLEAN_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> method_invocation -> String",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> method_invocation -> valueOf",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> method_invocation -> argument_list -> binary_expression -> array_access -> value",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> method_invocation -> argument_list -> binary_expression -> array_access -> 0",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> method_invocation -> argument_list -> binary_expression -> 1",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> getBytes",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.INT_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.INT_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> INTEGER_LEXICODER",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> encode",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> method_invocation -> ByteBuffer",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> method_invocation -> wrap",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> method_invocation -> argument_list -> value",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> asIntBuffer",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> get",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.SMALLINT_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.SMALLINT_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> INTEGER_LEXICODER",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> encode",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> cast_expression -> integral_type",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> cast_expression -> parenthesized_expression -> method_invocation -> method_invocation -> method_invocation -> ByteBuffer",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> cast_expression -> parenthesized_expression -> method_invocation -> method_invocation -> method_invocation -> wrap",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> cast_expression -> parenthesized_expression -> method_invocation -> method_invocation -> method_invocation -> argument_list -> value",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> cast_expression -> parenthesized_expression -> method_invocation -> method_invocation -> asShortBuffer",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> cast_expression -> parenthesized_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> cast_expression -> parenthesized_expression -> method_invocation -> get",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> cast_expression -> parenthesized_expression -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.TINYINT_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.TINYINT_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> INTEGER_LEXICODER",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> encode",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> cast_expression -> integral_type",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> cast_expression -> array_access -> value",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> cast_expression -> array_access -> 0",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.FLOAT_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.FLOAT_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> DOUBLE_LEXICODER",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> encode",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> cast_expression -> floating_point_type",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> cast_expression -> method_invocation -> method_invocation -> method_invocation -> ByteBuffer",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> cast_expression -> method_invocation -> method_invocation -> method_invocation -> wrap",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> cast_expression -> method_invocation -> method_invocation -> method_invocation -> argument_list -> value",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> cast_expression -> method_invocation -> method_invocation -> asFloatBuffer",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> cast_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> cast_expression -> method_invocation -> get",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> cast_expression -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.DOUBLE_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.DOUBLE_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> DOUBLE_LEXICODER",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> encode",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> method_invocation -> ByteBuffer",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> method_invocation -> wrap",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> method_invocation -> argument_list -> value",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> asDoubleBuffer",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> get",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.BIGINT_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.BIGINT_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> BIG_INTEGER_LEXICODER",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> encode",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> object_creation_expression -> BigInteger",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> object_creation_expression -> argument_list -> value",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.DECIMAL_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.DECIMAL_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> object_creation_expression -> String",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> object_creation_expression -> argument_list -> value",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> getBytes",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> UTF_8",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> value"
    ],
    "encodeStringValue": [
        "program -> local_variable_declaration -> String",
        "program -> local_variable_declaration -> variable_declarator -> rawType",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getRawType",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> hiveType",
        "program -> switch_expression -> parenthesized_expression -> rawType",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.BOOLEAN_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.BOOLEAN_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> method_invocation -> method_invocation -> Boolean",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> method_invocation -> method_invocation -> valueOf",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> method_invocation -> method_invocation -> argument_list -> object_creation_expression -> String",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> method_invocation -> method_invocation -> argument_list -> object_creation_expression -> argument_list -> value",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> method_invocation -> toString",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> getBytes",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> UTF_8",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.SMALLINT_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.SMALLINT_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.TINYINT_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.TINYINT_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.INT_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.INT_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> INTEGER_LEXICODER",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> encode",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> Integer",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> valueOf",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> object_creation_expression -> String",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> object_creation_expression -> argument_list -> value",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.FLOAT_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.FLOAT_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.DOUBLE_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.DOUBLE_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> DOUBLE_LEXICODER",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> encode",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> Double",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> valueOf",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> object_creation_expression -> String",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> object_creation_expression -> argument_list -> value",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.BIGINT_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.BIGINT_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> BIG_INTEGER_LEXICODER",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> encode",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> object_creation_expression -> BigInteger",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> object_creation_expression -> argument_list -> object_creation_expression -> String",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> object_creation_expression -> argument_list -> object_creation_expression -> argument_list -> value",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> object_creation_expression -> argument_list -> 10",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.DECIMAL_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> field_access -> serdeConstants.DECIMAL_TYPE_NAME",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> object_creation_expression -> String",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> object_creation_expression -> argument_list -> value",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> getBytes",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> method_invocation -> argument_list -> UTF_8",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement -> value"
    ],
    "encodeValue": [
        "program -> if_statement -> parenthesized_expression -> stringEncoded",
        "program -> if_statement -> block -> return_statement -> method_invocation -> encodeStringValue",
        "program -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> value",
        "program -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> hiveType",
        "program -> if_statement -> block -> return_statement -> method_invocation -> encodeBinaryValue",
        "program -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> value",
        "program -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> hiveType"
    ],
    "encode": [
        "program -> try_statement -> block -> return_statement -> method_invocation -> URLEncoder",
        "program -> try_statement -> block -> return_statement -> method_invocation -> encode",
        "program -> try_statement -> block -> return_statement -> method_invocation -> argument_list -> key",
        "program -> try_statement -> block -> return_statement -> method_invocation -> argument_list -> method_invocation -> field_access -> StandardCharsets.UTF_8",
        "program -> try_statement -> block -> return_statement -> method_invocation -> argument_list -> method_invocation -> field_access -> StandardCharsets.UTF_8",
        "program -> try_statement -> block -> return_statement -> method_invocation -> argument_list -> method_invocation -> name",
        "program -> try_statement -> block -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> UnsupportedEncodingException",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> try_statement -> catch_clause -> block -> return_statement -> key"
    ],
    "equals": [
        "program -> if_statement -> parenthesized_expression -> binary_expression -> this",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> o",
        "program -> if_statement -> block -> return_statement -> true",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> o",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> null",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> getClass",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> o",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> getClass",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> block -> return_statement -> false",
        "program -> local_variable_declaration -> TaskAttemptWrapper",
        "program -> local_variable_declaration -> variable_declarator -> that",
        "program -> local_variable_declaration -> variable_declarator -> cast_expression -> TaskAttemptWrapper",
        "program -> local_variable_declaration -> variable_declarator -> cast_expression -> o",
        "program -> return_statement -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> getId",
        "program -> return_statement -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> return_statement -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> that",
        "program -> return_statement -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> getId",
        "program -> return_statement -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> return_statement -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> method_invocation -> getTaskID",
        "program -> return_statement -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> return_statement -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> getId",
        "program -> return_statement -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> return_statement -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> method_invocation -> that",
        "program -> return_statement -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> method_invocation -> getTaskID",
        "program -> return_statement -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> return_statement -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> getId",
        "program -> return_statement -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> return_statement -> binary_expression -> method_invocation -> Objects",
        "program -> return_statement -> binary_expression -> method_invocation -> equals",
        "program -> return_statement -> binary_expression -> method_invocation -> argument_list -> method_invocation -> getJobID",
        "program -> return_statement -> binary_expression -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> return_statement -> binary_expression -> method_invocation -> argument_list -> method_invocation -> that",
        "program -> return_statement -> binary_expression -> method_invocation -> argument_list -> method_invocation -> getJobID",
        "program -> return_statement -> binary_expression -> method_invocation -> argument_list -> method_invocation -> argument_list"
    ],
    "fetchColumns": [
        "program -> expression_statement -> method_invocation -> AccumuloInputFormat",
        "program -> expression_statement -> method_invocation -> fetchColumns",
        "program -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> expression_statement -> method_invocation -> argument_list -> cfCqPairs"
    ],
    "filter": [
        "program -> local_variable_declaration -> Database",
        "program -> local_variable_declaration -> variable_declarator -> db",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> Database",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> \"f1\"",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> \"no description\"",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> testTempDir",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> emptyParameters",
        "program -> expression_statement -> method_invocation -> msClient",
        "program -> expression_statement -> method_invocation -> createDatabase",
        "program -> expression_statement -> method_invocation -> argument_list -> db",
        "program -> expression_statement -> assignment_expression -> db",
        "program -> expression_statement -> assignment_expression -> object_creation_expression -> Database",
        "program -> expression_statement -> assignment_expression -> object_creation_expression -> argument_list -> \"f2\"",
        "program -> expression_statement -> assignment_expression -> object_creation_expression -> argument_list -> \"no description\"",
        "program -> expression_statement -> assignment_expression -> object_creation_expression -> argument_list -> testTempDir",
        "program -> expression_statement -> assignment_expression -> object_creation_expression -> argument_list -> emptyParameters",
        "program -> expression_statement -> method_invocation -> msClient",
        "program -> expression_statement -> method_invocation -> createDatabase",
        "program -> expression_statement -> method_invocation -> argument_list -> db",
        "program -> expression_statement -> method_invocation -> msClient",
        "program -> expression_statement -> method_invocation -> dropDatabase",
        "program -> expression_statement -> method_invocation -> argument_list -> \"f2\"",
        "program -> local_variable_declaration -> scoped_type_identifier -> IMetaStoreClient",
        "program -> local_variable_declaration -> scoped_type_identifier -> NotificationFilter",
        "program -> local_variable_declaration -> variable_declarator -> filter",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> scoped_type_identifier -> IMetaStoreClient",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> scoped_type_identifier -> NotificationFilter",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> class_body -> method_declaration -> modifiers -> marker_annotation -> Override",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> class_body -> method_declaration -> boolean",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> class_body -> method_declaration -> accept",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> class_body -> method_declaration -> formal_parameters -> formal_parameter -> NotificationEvent",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> class_body -> method_declaration -> formal_parameters -> formal_parameter -> event",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> class_body -> method_declaration -> block -> return_statement -> method_invocation -> method_invocation -> event",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> class_body -> method_declaration -> block -> return_statement -> method_invocation -> method_invocation -> getEventType",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> class_body -> method_declaration -> block -> return_statement -> method_invocation -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> class_body -> method_declaration -> block -> return_statement -> method_invocation -> equals",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> class_body -> method_declaration -> block -> return_statement -> method_invocation -> argument_list -> method_invocation -> field_access -> EventType.DROP_DATABASE",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> class_body -> method_declaration -> block -> return_statement -> method_invocation -> argument_list -> method_invocation -> field_access -> EventType.DROP_DATABASE",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> class_body -> method_declaration -> block -> return_statement -> method_invocation -> argument_list -> method_invocation -> toString",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> class_body -> method_declaration -> block -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> NotificationEventResponse",
        "program -> local_variable_declaration -> variable_declarator -> rsp",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> msClient",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getNextNotification",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> firstEventId",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> 0",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> filter",
        "program -> expression_statement -> method_invocation -> assertEquals",
        "program -> expression_statement -> method_invocation -> argument_list -> 1",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> rsp",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getEventsSize",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> assertEquals",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> firstEventId",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> 3",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> method_invocation -> rsp",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> method_invocation -> getEvents",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> get",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> argument_list -> 0",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getEventId",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list"
    ],
    "fromCode": [
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> CODE_CACHE",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> containsKey",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> argument_list -> code",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> IllegalArgumentException",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"No ColumnEncoding defined with code \"",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> code",
        "program -> return_statement -> method_invocation -> CODE_CACHE",
        "program -> return_statement -> method_invocation -> get",
        "program -> return_statement -> method_invocation -> argument_list -> code"
    ],
    "fromName": [
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> NAME_CACHE",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> containsKey",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> argument_list -> name",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> IllegalArgumentException",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"No ColumnEncoding defined with name \"",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> name",
        "program -> return_statement -> method_invocation -> NAME_CACHE",
        "program -> return_statement -> method_invocation -> get",
        "program -> return_statement -> method_invocation -> argument_list -> name"
    ],
    "generateRanges": [
        "program -> local_variable_declaration -> AccumuloRangeGenerator",
        "program -> local_variable_declaration -> variable_declarator -> rangeGenerator",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> AccumuloRangeGenerator",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> conf",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> handler",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> columnMapper",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> getRowIdMapping",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> hiveRowIdColumnName",
        "program -> local_variable_declaration -> SemanticDispatcher",
        "program -> local_variable_declaration -> variable_declarator -> disp",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> DefaultRuleDispatcher",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> rangeGenerator",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> Collections",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> type_arguments -> SemanticRule",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> type_arguments -> SemanticNodeProcessor",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> emptyMap",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> null",
        "program -> local_variable_declaration -> SemanticGraphWalker",
        "program -> local_variable_declaration -> variable_declarator -> ogw",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> DefaultGraphWalker",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> disp",
        "program -> local_variable_declaration -> generic_type -> List",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> Node",
        "program -> local_variable_declaration -> variable_declarator -> roots",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> ArrayList",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> type_arguments -> Node",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> expression_statement -> method_invocation -> roots",
        "program -> expression_statement -> method_invocation -> add",
        "program -> expression_statement -> method_invocation -> argument_list -> root",
        "program -> local_variable_declaration -> generic_type -> HashMap",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> Node",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> Object",
        "program -> local_variable_declaration -> variable_declarator -> nodeOutput",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> HashMap",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> type_arguments -> Node",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> type_arguments -> Object",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> ogw",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> startWalking",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> roots",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> nodeOutput",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> SemanticException",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> ex",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> RuntimeException",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> ex",
        "program -> return_statement -> method_invocation -> nodeOutput",
        "program -> return_statement -> method_invocation -> get",
        "program -> return_statement -> method_invocation -> argument_list -> root"
    ],
    "getAccumuloInstanceName": [
        "program -> expression_statement -> method_invocation -> Preconditions",
        "program -> expression_statement -> method_invocation -> checkNotNull",
        "program -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> return_statement -> method_invocation -> conf",
        "program -> return_statement -> method_invocation -> get",
        "program -> return_statement -> method_invocation -> argument_list -> INSTANCE_NAME"
    ],
    "getAccumuloKeytab": [
        "program -> expression_statement -> method_invocation -> Preconditions",
        "program -> expression_statement -> method_invocation -> checkNotNull",
        "program -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> return_statement -> method_invocation -> conf",
        "program -> return_statement -> method_invocation -> get",
        "program -> return_statement -> method_invocation -> argument_list -> USER_KEYTAB"
    ],
    "getAccumuloPassword": [
        "program -> expression_statement -> method_invocation -> Preconditions",
        "program -> expression_statement -> method_invocation -> checkNotNull",
        "program -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> return_statement -> method_invocation -> conf",
        "program -> return_statement -> method_invocation -> get",
        "program -> return_statement -> method_invocation -> argument_list -> USER_PASS"
    ],
    "getAccumuloTableName": [
        "program -> expression_statement -> method_invocation -> Preconditions",
        "program -> expression_statement -> method_invocation -> checkNotNull",
        "program -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> return_statement -> method_invocation -> conf",
        "program -> return_statement -> method_invocation -> get",
        "program -> return_statement -> method_invocation -> argument_list -> TABLE_NAME"
    ],
    "getAccumuloToken": [
        "program -> expression_statement -> method_invocation -> checkNotNull",
        "program -> expression_statement -> method_invocation -> argument_list -> user",
        "program -> expression_statement -> method_invocation -> argument_list -> \"Provided UGI was null\"",
        "program -> local_variable_declaration -> generic_type -> Collection",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> generic_type -> Token",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> generic_type -> type_arguments -> wildcard -> TokenIdentifier",
        "program -> local_variable_declaration -> variable_declarator -> tokens",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> user",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getTokens",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> generic_type -> Token",
        "program -> enhanced_for_statement -> generic_type -> type_arguments -> wildcard",
        "program -> enhanced_for_statement -> token",
        "program -> enhanced_for_statement -> tokens",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> ACCUMULO_SERVICE",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> equals",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> method_invocation -> token",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> method_invocation -> getKind",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> return_statement -> token",
        "program -> return_statement -> null"
    ],
    "getAccumuloUserName": [
        "program -> expression_statement -> method_invocation -> Preconditions",
        "program -> expression_statement -> method_invocation -> checkNotNull",
        "program -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> return_statement -> method_invocation -> conf",
        "program -> return_statement -> method_invocation -> get",
        "program -> return_statement -> method_invocation -> argument_list -> USER_NAME"
    ],
    "getAuthorizationProvider": [
        "program -> return_statement -> method_invocation -> class_literal -> DefaultHiveMetastoreAuthorizationProvider",
        "program -> return_statement -> method_invocation -> getName",
        "program -> return_statement -> method_invocation -> argument_list"
    ],
    "getAuths": [
        "program -> local_variable_declaration -> Configuration",
        "program -> local_variable_declaration -> variable_declarator -> conf",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> Configuration",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> expression_statement -> method_invocation -> conf",
        "program -> expression_statement -> method_invocation -> set",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> AccumuloSerDeParameters.AUTHORIZATIONS_KEY",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> AccumuloSerDeParameters.AUTHORIZATIONS_KEY",
        "program -> expression_statement -> method_invocation -> argument_list -> \"public,open\"",
        "program -> local_variable_declaration -> Authorizations",
        "program -> local_variable_declaration -> variable_declarator -> auths",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> object_creation_expression -> AccumuloIndexParameters",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> object_creation_expression -> argument_list -> conf",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getTableAuths",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> assertEquals",
        "program -> expression_statement -> method_invocation -> argument_list -> 2",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> auths",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> size",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> assertTrue",
        "program -> expression_statement -> method_invocation -> argument_list -> \"Missing auth public\"",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> auths",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> contains",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> \"public\"",
        "program -> expression_statement -> method_invocation -> assertTrue",
        "program -> expression_statement -> method_invocation -> argument_list -> \"Missing auth open\"",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> auths",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> contains",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> \"open\""
    ],
    "getBaseTable": [
        "program -> return_statement -> baseTable"
    ],
    "getBinaryValue": [
        "program -> local_variable_declaration -> ByteArrayOutputStream",
        "program -> local_variable_declaration -> variable_declarator -> out",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> ByteArrayOutputStream",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> if_statement -> parenthesized_expression -> instanceof_expression -> objInspector",
        "program -> if_statement -> parenthesized_expression -> instanceof_expression -> PrimitiveObjectInspector",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> LazyUtils",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> writePrimitive",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> out",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> objInspector",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getWritableConstantValue",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> cast_expression -> PrimitiveObjectInspector",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> cast_expression -> objInspector",
        "program -> if_statement -> block -> return_statement -> method_invocation -> getUtf8Value",
        "program -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> objInspector",
        "program -> expression_statement -> method_invocation -> out",
        "program -> expression_statement -> method_invocation -> close",
        "program -> expression_statement -> method_invocation -> argument_list",
        "program -> return_statement -> object_creation_expression -> Text",
        "program -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> out",
        "program -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> toByteArray",
        "program -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> argument_list"
    ],
    "getCf": [
        "program -> return_statement -> cf"
    ],
    "getClientConfiguration": [
        "program -> return_statement -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> ClientConfiguration",
        "program -> return_statement -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> loadDefault",
        "program -> return_statement -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> argument_list",
        "program -> return_statement -> method_invocation -> method_invocation -> method_invocation -> withInstance",
        "program -> return_statement -> method_invocation -> method_invocation -> method_invocation -> argument_list -> instanceName",
        "program -> return_statement -> method_invocation -> method_invocation -> withZkHosts",
        "program -> return_statement -> method_invocation -> method_invocation -> argument_list -> zookeepers",
        "program -> return_statement -> method_invocation -> withSasl",
        "program -> return_statement -> method_invocation -> argument_list -> useSasl"
    ],
    "getCode": [
        "program -> return_statement -> code"
    ],
    "getColType": [
        "program -> return_statement -> method_invocation -> colMap",
        "program -> return_statement -> method_invocation -> get",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> encode",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> cf",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> cq"
    ],
    "getColumnEncoding": [
        "program -> local_variable_declaration -> integral_type",
        "program -> local_variable_declaration -> variable_declarator -> offset",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> columnMapping",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> lastIndexOf",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.POUND",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.POUND",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> 0",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> offset",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> field_access -> AccumuloHiveConstants.ESCAPE",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> field_access -> AccumuloHiveConstants.ESCAPE",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> columnMapping",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> charAt",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list -> binary_expression -> offset",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list -> binary_expression -> 1",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> IllegalArgumentException",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"Column mapping did not contain a column encoding: \"",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> columnMapping",
        "program -> return_statement -> method_invocation -> columnMapping",
        "program -> return_statement -> method_invocation -> substring",
        "program -> return_statement -> method_invocation -> argument_list -> binary_expression -> offset",
        "program -> return_statement -> method_invocation -> argument_list -> binary_expression -> 1"
    ],
    "getColumnFamilyBytes": [
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> columnFamilyBytes",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> columnFamilyBytes",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> columnFamily",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> getBytes",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> field_access -> Charsets.UTF_8",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> field_access -> Charsets.UTF_8",
        "program -> return_statement -> columnFamilyBytes"
    ],
    "getColumnFamily": [
        "program -> return_statement -> columnFamily"
    ],
    "getColumnMapper": [
        "program -> return_statement -> columnMapper"
    ],
    "getColumnMappingForHiveColumn": [
        "program -> local_variable_declaration -> generic_type -> List",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> String",
        "program -> local_variable_declaration -> variable_declarator -> hiveColumnNames",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> lazySerDeParameters",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getColumnNames",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> for_statement -> local_variable_declaration -> integral_type",
        "program -> for_statement -> local_variable_declaration -> variable_declarator -> offset",
        "program -> for_statement -> local_variable_declaration -> variable_declarator -> 0",
        "program -> for_statement -> binary_expression -> binary_expression -> offset",
        "program -> for_statement -> binary_expression -> binary_expression -> method_invocation -> hiveColumnNames",
        "program -> for_statement -> binary_expression -> binary_expression -> method_invocation -> size",
        "program -> for_statement -> binary_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> for_statement -> binary_expression -> binary_expression -> offset",
        "program -> for_statement -> binary_expression -> binary_expression -> method_invocation -> columnMapper",
        "program -> for_statement -> binary_expression -> binary_expression -> method_invocation -> size",
        "program -> for_statement -> binary_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> for_statement -> update_expression -> offset",
        "program -> for_statement -> block -> local_variable_declaration -> String",
        "program -> for_statement -> block -> local_variable_declaration -> variable_declarator -> hiveColumnName",
        "program -> for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> hiveColumnNames",
        "program -> for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> get",
        "program -> for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> offset",
        "program -> for_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> hiveColumn",
        "program -> for_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> equals",
        "program -> for_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> hiveColumnName",
        "program -> for_statement -> block -> if_statement -> block -> return_statement -> method_invocation -> columnMapper",
        "program -> for_statement -> block -> if_statement -> block -> return_statement -> method_invocation -> get",
        "program -> for_statement -> block -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> offset",
        "program -> throw_statement -> object_creation_expression -> NoSuchElementException",
        "program -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"Could not find column mapping for Hive column \"",
        "program -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> hiveColumn"
    ],
    "getColumnMappings": [
        "program -> return_statement -> columnMappings"
    ],
    "getColumnMap": [
        "program -> return_statement -> colMap"
    ],
    "getColumnName": [
        "program -> return_statement -> columnName"
    ],
    "getColumnOpConstantRange": [
        "program -> if_statement -> parenthesized_expression -> method_invocation -> opClz",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> equals",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> class_literal -> Equal",
        "program -> if_statement -> block -> return_statement -> object_creation_expression -> Range",
        "program -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> constText",
        "program -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> opClz",
        "program -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> equals",
        "program -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> class_literal -> GreaterThanOrEqual",
        "program -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> Range",
        "program -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> constText",
        "program -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> null",
        "program -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> opClz",
        "program -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> equals",
        "program -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> class_literal -> GreaterThan",
        "program -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> Range",
        "program -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> constText",
        "program -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> false",
        "program -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> null",
        "program -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> false",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> opClz",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> equals",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> class_literal -> LessThanOrEqual",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> Range",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> null",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> false",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> constText",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> true",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> opClz",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> equals",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> class_literal -> LessThan",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> Range",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> null",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> false",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> constText",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> false",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> IllegalArgumentException",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"Could not process \"",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> opClz"
    ],
    "getColumnQualifierBytes": [
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> columnQualifierBytes",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> columnQualifierBytes",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> columnQualifier",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> getBytes",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> field_access -> Charsets.UTF_8",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> field_access -> Charsets.UTF_8",
        "program -> return_statement -> columnQualifierBytes"
    ],
    "getColumnQualifierPrefix": [
        "program -> return_statement -> columnQualifierPrefix"
    ],
    "getColumnQualifier": [
        "program -> return_statement -> field_access -> this.columnQualifier",
        "program -> return_statement -> field_access -> this.columnQualifier"
    ],
    "getColumnTypes": [
        "program -> return_statement -> method_invocation -> serdeParams",
        "program -> return_statement -> method_invocation -> getColumnTypes",
        "program -> return_statement -> method_invocation -> argument_list"
    ],
    "getColumnType": [
        "program -> return_statement -> columnType"
    ],
    "getCompareOpClass": [
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> compareOps",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> containsKey",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> argument_list -> udfType",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> NoSuchCompareOpException",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"Null compare op for specified key: \"",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> udfType",
        "program -> return_statement -> method_invocation -> compareOps",
        "program -> return_statement -> method_invocation -> get",
        "program -> return_statement -> method_invocation -> argument_list -> udfType"
    ],
    "getCompareOp": [
        "program -> local_variable_declaration -> generic_type -> Class",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> wildcard -> CompareOp",
        "program -> local_variable_declaration -> variable_declarator -> clz",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getCompareOpClass",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> udfType",
        "program -> try_statement -> block -> return_statement -> method_invocation -> clz",
        "program -> try_statement -> block -> return_statement -> method_invocation -> newInstance",
        "program -> try_statement -> block -> return_statement -> method_invocation -> argument_list",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> ClassCastException",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> SerDeException",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> \"Column type mismatch in WHERE clause \"",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> method_invocation -> sc",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> method_invocation -> getIndexExpr",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> getExprString",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> \" found type \"",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> method_invocation -> sc",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> method_invocation -> getConstantDesc",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> getTypeString",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> \" instead of \"",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> method_invocation -> sc",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> method_invocation -> getColumnDesc",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> getTypeString",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> argument_list",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> IllegalAccessException",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> SerDeException",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> \"Could not instantiate class for WHERE clause\"",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> e",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> InstantiationException",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> SerDeException",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> \"Could not instantiate class for WHERE clause\"",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> e"
    ],
    "getConf": [
        "program -> return_statement -> hiveConf"
    ],
    "getConnectionParams": [
        "program -> return_statement -> object_creation_expression -> AccumuloConnectionParameters",
        "program -> return_statement -> object_creation_expression -> argument_list -> conf"
    ],
    "getConnector": [
        "program -> return_statement -> connector"
    ],
    "getConnectParams": [
        "program -> return_statement -> connectParams"
    ],
    "getConnect": [
        "program -> return_statement -> connect"
    ],
    "getConstantAsBytes": [
        "program -> if_statement -> parenthesized_expression -> instanceof_expression -> pCompare",
        "program -> if_statement -> parenthesized_expression -> instanceof_expression -> StringCompare",
        "program -> if_statement -> block -> return_statement -> method_invocation -> method_invocation -> writable",
        "program -> if_statement -> block -> return_statement -> method_invocation -> method_invocation -> toString",
        "program -> if_statement -> block -> return_statement -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> block -> return_statement -> method_invocation -> getBytes",
        "program -> if_statement -> block -> return_statement -> method_invocation -> argument_list",
        "program -> if_statement -> if_statement -> parenthesized_expression -> instanceof_expression -> pCompare",
        "program -> if_statement -> if_statement -> parenthesized_expression -> instanceof_expression -> DoubleCompare",
        "program -> if_statement -> if_statement -> block -> local_variable_declaration -> array_type -> integral_type",
        "program -> if_statement -> if_statement -> block -> local_variable_declaration -> array_type -> dimensions",
        "program -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> bts",
        "program -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> array_creation_expression -> integral_type",
        "program -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> array_creation_expression -> dimensions_expr -> 8",
        "program -> if_statement -> if_statement -> block -> local_variable_declaration -> floating_point_type",
        "program -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> val",
        "program -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> parenthesized_expression -> cast_expression -> DoubleWritable",
        "program -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> parenthesized_expression -> cast_expression -> writable",
        "program -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> get",
        "program -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> ByteBuffer",
        "program -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> wrap",
        "program -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> argument_list -> bts",
        "program -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> putDouble",
        "program -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> val",
        "program -> if_statement -> if_statement -> block -> return_statement -> bts",
        "program -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> instanceof_expression -> pCompare",
        "program -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> instanceof_expression -> IntCompare",
        "program -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> array_type -> integral_type",
        "program -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> array_type -> dimensions",
        "program -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> bts",
        "program -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> array_creation_expression -> integral_type",
        "program -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> array_creation_expression -> dimensions_expr -> 4",
        "program -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> integral_type",
        "program -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> val",
        "program -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> parenthesized_expression -> cast_expression -> IntWritable",
        "program -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> parenthesized_expression -> cast_expression -> writable",
        "program -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> get",
        "program -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> ByteBuffer",
        "program -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> wrap",
        "program -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> argument_list -> bts",
        "program -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> putInt",
        "program -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> val",
        "program -> if_statement -> if_statement -> if_statement -> block -> return_statement -> bts",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> instanceof_expression -> pCompare",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> instanceof_expression -> LongCompare",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> array_type -> integral_type",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> array_type -> dimensions",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> bts",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> array_creation_expression -> integral_type",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> array_creation_expression -> dimensions_expr -> 8",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> integral_type",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> val",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> parenthesized_expression -> cast_expression -> LongWritable",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> parenthesized_expression -> cast_expression -> writable",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> get",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> ByteBuffer",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> wrap",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> argument_list -> bts",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> putLong",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> val",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> return_statement -> bts",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> SerDeException",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"Unsupported primitive category: \"",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> method_invocation -> pCompare",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> method_invocation -> getClass",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> getName",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> argument_list"
    ],
    "getConstantOpColumnRange": [
        "program -> if_statement -> parenthesized_expression -> method_invocation -> opClz",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> equals",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> class_literal -> Equal",
        "program -> if_statement -> block -> return_statement -> object_creation_expression -> Range",
        "program -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> constText",
        "program -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> opClz",
        "program -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> equals",
        "program -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> class_literal -> GreaterThanOrEqual",
        "program -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> Range",
        "program -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> null",
        "program -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> constText",
        "program -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> opClz",
        "program -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> equals",
        "program -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> class_literal -> GreaterThan",
        "program -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> Range",
        "program -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> null",
        "program -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> false",
        "program -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> constText",
        "program -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> false",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> opClz",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> equals",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> class_literal -> LessThanOrEqual",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> Range",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> constText",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> true",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> null",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> false",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> opClz",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> equals",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> class_literal -> LessThan",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> Range",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> constText",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> false",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> null",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> false",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> IllegalArgumentException",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"Could not process \"",
        "program -> if_statement -> if_statement -> if_statement -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> opClz"
    ],
    "getConstantText": [
        "program -> local_variable_declaration -> Text",
        "program -> local_variable_declaration -> variable_declarator -> constText",
        "program -> switch_expression -> parenthesized_expression -> method_invocation -> rowIdMapping",
        "program -> switch_expression -> parenthesized_expression -> method_invocation -> getEncoding",
        "program -> switch_expression -> parenthesized_expression -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> STRING",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> expression_statement -> assignment_expression -> constText",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> expression_statement -> assignment_expression -> method_invocation -> getUtf8Value",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> objInspector",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> break_statement",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> BINARY",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> try_statement -> block -> expression_statement -> assignment_expression -> constText",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> getBinaryValue",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> objInspector",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> IOException",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> SemanticException",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> e",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> break_statement",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> throw_statement -> object_creation_expression -> SemanticException",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"Unable to parse unknown encoding: \"",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> rowIdMapping",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> getEncoding",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> argument_list",
        "program -> return_statement -> constText"
    ],
    "getConstant": [
        "program -> local_variable_declaration -> String",
        "program -> local_variable_declaration -> variable_declarator -> b64Const",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> options",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> get",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> CONST_VAL",
        "program -> return_statement -> method_invocation -> method_invocation -> Base64",
        "program -> return_statement -> method_invocation -> method_invocation -> getDecoder",
        "program -> return_statement -> method_invocation -> method_invocation -> argument_list",
        "program -> return_statement -> method_invocation -> decode",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> b64Const",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> getBytes",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list"
    ],
    "getConstVal": [
        "program -> return_statement -> constVal"
    ],
    "getcOpt": [
        "program -> return_statement -> cOpt"
    ],
    "getCq": [
        "program -> return_statement -> cq"
    ],
    "getCurrentUser": [
        "program -> return_statement -> method_invocation -> UserGroupInformation",
        "program -> return_statement -> method_invocation -> getCurrentUser",
        "program -> return_statement -> method_invocation -> argument_list"
    ],
    "getDefault": [
        "program -> return_statement -> STRING"
    ],
    "getDelegationToken": [
        "program -> return_statement -> method_invocation -> tokenCache",
        "program -> return_statement -> method_invocation -> get",
        "program -> return_statement -> method_invocation -> argument_list -> jobId"
    ],
    "getEncoding": [
        "program -> return_statement -> encoding"
    ],
    "getExpression": [
        "program -> local_variable_declaration -> String",
        "program -> local_variable_declaration -> variable_declarator -> filteredExprSerialized",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> conf",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> get",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> TableScanDesc.FILTER_EXPR_CONF_STR",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> TableScanDesc.FILTER_EXPR_CONF_STR",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> filteredExprSerialized",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> block -> return_statement -> null",
        "program -> return_statement -> method_invocation -> SerializationUtilities",
        "program -> return_statement -> method_invocation -> deserializeExpression",
        "program -> return_statement -> method_invocation -> argument_list -> filteredExprSerialized"
    ],
    "getField": [
        "program -> if_statement -> parenthesized_expression -> binary_expression -> o",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> block -> return_statement -> null",
        "program -> return_statement -> method_invocation -> parenthesized_expression -> cast_expression -> UnionObject",
        "program -> return_statement -> method_invocation -> parenthesized_expression -> cast_expression -> o",
        "program -> return_statement -> method_invocation -> getObject",
        "program -> return_statement -> method_invocation -> argument_list"
    ],
    "getFromMapping": [
        "program -> expression_statement -> method_invocation -> Preconditions",
        "program -> expression_statement -> method_invocation -> checkNotNull",
        "program -> expression_statement -> method_invocation -> argument_list -> columnMapping",
        "program -> local_variable_declaration -> String",
        "program -> local_variable_declaration -> variable_declarator -> encoding",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getColumnEncoding",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> columnMapping",
        "program -> return_statement -> method_invocation -> get",
        "program -> return_statement -> method_invocation -> argument_list -> encoding"
    ],
    "getHadoopToken": [
        "program -> if_statement -> parenthesized_expression -> unary_expression -> parenthesized_expression -> instanceof_expression -> token",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> parenthesized_expression -> instanceof_expression -> DelegationTokenImpl",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> IOException",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"Expected a DelegationTokenImpl but found \"",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> parenthesized_expression -> ternary_expression -> binary_expression -> token",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> parenthesized_expression -> ternary_expression -> binary_expression -> null",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> parenthesized_expression -> ternary_expression -> method_invocation -> token",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> parenthesized_expression -> ternary_expression -> method_invocation -> getClass",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> parenthesized_expression -> ternary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> parenthesized_expression -> ternary_expression -> \"null\"",
        "program -> local_variable_declaration -> DelegationTokenImpl",
        "program -> local_variable_declaration -> variable_declarator -> dt",
        "program -> local_variable_declaration -> variable_declarator -> cast_expression -> DelegationTokenImpl",
        "program -> local_variable_declaration -> variable_declarator -> cast_expression -> token",
        "program -> try_statement -> block -> local_variable_declaration -> AuthenticationTokenIdentifier",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> identifier",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> dt",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> getIdentifier",
        "program -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> try_statement -> block -> return_statement -> object_creation_expression -> generic_type -> Token",
        "program -> try_statement -> block -> return_statement -> object_creation_expression -> generic_type -> type_arguments -> AuthenticationTokenIdentifier",
        "program -> try_statement -> block -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> identifier",
        "program -> try_statement -> block -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> getBytes",
        "program -> try_statement -> block -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> argument_list",
        "program -> try_statement -> block -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> dt",
        "program -> try_statement -> block -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> getPassword",
        "program -> try_statement -> block -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> argument_list",
        "program -> try_statement -> block -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> identifier",
        "program -> try_statement -> block -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> getKind",
        "program -> try_statement -> block -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> argument_list",
        "program -> try_statement -> block -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> dt",
        "program -> try_statement -> block -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> getServiceName",
        "program -> try_statement -> block -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> argument_list",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> Exception",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> IOException",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> \"Failed to create Hadoop token from Accumulo DelegationToken\"",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> e"
    ],
    "getHelper": [
        "program -> return_statement -> helper"
    ],
    "getIndexColumns": [
        "program -> local_variable_declaration -> Configuration",
        "program -> local_variable_declaration -> variable_declarator -> conf",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> Configuration",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> expression_statement -> method_invocation -> conf",
        "program -> expression_statement -> method_invocation -> set",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> AccumuloIndexParameters.INDEXED_COLUMNS",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> AccumuloIndexParameters.INDEXED_COLUMNS",
        "program -> expression_statement -> method_invocation -> argument_list -> \"a,b,c\"",
        "program -> local_variable_declaration -> generic_type -> Set",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> String",
        "program -> local_variable_declaration -> variable_declarator -> cols",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> object_creation_expression -> AccumuloIndexParameters",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> object_creation_expression -> argument_list -> conf",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getIndexColumns",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> assertEquals",
        "program -> expression_statement -> method_invocation -> argument_list -> 3",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> cols",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> size",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> assertTrue",
        "program -> expression_statement -> method_invocation -> argument_list -> \"Missing column a\"",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> cols",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> contains",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> \"a\"",
        "program -> expression_statement -> method_invocation -> assertTrue",
        "program -> expression_statement -> method_invocation -> argument_list -> \"Missing column b\"",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> cols",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> contains",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> \"b\"",
        "program -> expression_statement -> method_invocation -> assertTrue",
        "program -> expression_statement -> method_invocation -> argument_list -> \"Missing column c\"",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> cols",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> contains",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> \"c\""
    ],
    "getIndexedColFamQuals": [
        "program -> local_variable_declaration -> StringBuilder",
        "program -> local_variable_declaration -> variable_declarator -> sb",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> StringBuilder",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> local_variable_declaration -> String",
        "program -> local_variable_declaration -> variable_declarator -> cols",
        "program -> local_variable_declaration -> variable_declarator -> indexColumns",
        "program -> local_variable_declaration -> String",
        "program -> local_variable_declaration -> variable_declarator -> hiveColString",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> tableDesc",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> getProperties",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getProperty",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> serdeConstants.LIST_COLUMNS",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> serdeConstants.LIST_COLUMNS",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> binary_expression -> cols",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> binary_expression -> null",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> cols",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> isEmpty",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> \"*\"",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> equals",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> indexColumns",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> cols",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> hiveColString",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> substring",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> binary_expression -> method_invocation -> hiveColString",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> binary_expression -> method_invocation -> indexOf",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> binary_expression -> method_invocation -> argument_list -> ','",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> binary_expression -> 1",
        "program -> local_variable_declaration -> array_type -> String",
        "program -> local_variable_declaration -> array_type -> dimensions",
        "program -> local_variable_declaration -> variable_declarator -> hiveTypes",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> method_invocation -> tableDesc",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> method_invocation -> getProperties",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> getProperty",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list -> field_access -> serdeConstants.LIST_COLUMN_TYPES",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list -> field_access -> serdeConstants.LIST_COLUMN_TYPES",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> split",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> \":\"",
        "program -> local_variable_declaration -> array_type -> String",
        "program -> local_variable_declaration -> array_type -> dimensions",
        "program -> local_variable_declaration -> variable_declarator -> accCols",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> colMap",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> split",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> \",\"",
        "program -> local_variable_declaration -> array_type -> String",
        "program -> local_variable_declaration -> array_type -> dimensions",
        "program -> local_variable_declaration -> variable_declarator -> hiveCols",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> hiveColString",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> split",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> \",\"",
        "program -> local_variable_declaration -> generic_type -> Set",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> String",
        "program -> local_variable_declaration -> variable_declarator -> indexSet",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> HashSet",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> type_arguments -> String",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> enhanced_for_statement -> String",
        "program -> enhanced_for_statement -> idx",
        "program -> enhanced_for_statement -> method_invocation -> cols",
        "program -> enhanced_for_statement -> method_invocation -> split",
        "program -> enhanced_for_statement -> method_invocation -> argument_list -> \",\"",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> indexSet",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> add",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> idx",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> trim",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> for_statement -> local_variable_declaration -> integral_type",
        "program -> for_statement -> local_variable_declaration -> variable_declarator -> i",
        "program -> for_statement -> local_variable_declaration -> variable_declarator -> 0",
        "program -> for_statement -> binary_expression -> i",
        "program -> for_statement -> binary_expression -> field_access -> hiveCols.length",
        "program -> for_statement -> binary_expression -> field_access -> hiveCols.length",
        "program -> for_statement -> update_expression -> i",
        "program -> for_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> indexSet",
        "program -> for_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> contains",
        "program -> for_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> method_invocation -> array_access -> hiveCols",
        "program -> for_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> method_invocation -> array_access -> i",
        "program -> for_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> method_invocation -> trim",
        "program -> for_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> for_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> sb",
        "program -> for_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> length",
        "program -> for_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> for_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> 0",
        "program -> for_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> sb",
        "program -> for_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> append",
        "program -> for_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> \",\"",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> sb",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> append",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> method_invocation -> array_access -> accCols",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> method_invocation -> array_access -> i",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> method_invocation -> trim",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> \":\"",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> AccumuloIndexLexicoder",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> getRawType",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> argument_list -> array_access -> hiveTypes",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> argument_list -> array_access -> i",
        "program -> return_statement -> method_invocation -> sb",
        "program -> return_statement -> method_invocation -> toString",
        "program -> return_statement -> method_invocation -> argument_list"
    ],
    "getIndexedRowIds": [
        "program -> local_variable_declaration -> Text",
        "program -> local_variable_declaration -> variable_declarator -> constText",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getConstantText",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> objInspector",
        "program -> local_variable_declaration -> array_type -> integral_type",
        "program -> local_variable_declaration -> array_type -> dimensions",
        "program -> local_variable_declaration -> variable_declarator -> value",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> constText",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> toString",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getBytes",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> UTF_8",
        "program -> local_variable_declaration -> array_type -> integral_type",
        "program -> local_variable_declaration -> array_type -> dimensions",
        "program -> local_variable_declaration -> variable_declarator -> encoded",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> AccumuloIndexLexicoder",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> encodeValue",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> value",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> method_invocation -> leftHandNode",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> method_invocation -> getTypeString",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> true",
        "program -> local_variable_declaration -> Range",
        "program -> local_variable_declaration -> variable_declarator -> range",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getRange",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> genericUdf",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> leftHandNode",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> object_creation_expression -> Text",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> object_creation_expression -> argument_list -> encoded",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> indexScanner",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> block -> return_statement -> method_invocation -> indexScanner",
        "program -> if_statement -> block -> return_statement -> method_invocation -> getIndexRowRanges",
        "program -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> columnName",
        "program -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> range",
        "program -> return_statement -> null"
    ],
    "getIndexMutations": [
        "program -> local_variable_declaration -> List",
        "program -> local_variable_declaration -> variable_declarator -> indexMuts",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> ArrayList",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> type_arguments -> Mutation",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> indexDef",
        "program -> if_statement -> block -> local_variable_declaration -> array_type -> integral_type",
        "program -> if_statement -> block -> local_variable_declaration -> array_type -> dimensions",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> rowId",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> baseMut",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> getRow",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> if_statement -> block -> enhanced_for_statement -> ColumnUpdate",
        "program -> if_statement -> block -> enhanced_for_statement -> cu",
        "program -> if_statement -> block -> enhanced_for_statement -> method_invocation -> baseMut",
        "program -> if_statement -> block -> enhanced_for_statement -> method_invocation -> getUpdates",
        "program -> if_statement -> block -> enhanced_for_statement -> method_invocation -> argument_list",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> String",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> cf",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> String",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> cu",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> getColumnFamily",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> String",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> cq",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> String",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> cu",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> getColumnQualifier",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> String",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> colType",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> indexDef",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> getColType",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> cf",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> cq",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> colType",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> LOG",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> trace",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> \"Building index for column {}:{}\"",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> cf",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> cq",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> Mutation",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> m",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> Mutation",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> AccumuloIndexLexicoder",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> encodeValue",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> argument_list -> method_invocation -> cu",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> argument_list -> method_invocation -> getValue",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> argument_list -> colType",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> argument_list -> isStringEncoded",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> String",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> colFam",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> binary_expression -> binary_expression -> cf",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> binary_expression -> binary_expression -> \"_\"",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> binary_expression -> cq",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> m",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> put",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> colFam",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getBytes",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> rowId",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> object_creation_expression -> ColumnVisibility",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> object_creation_expression -> argument_list -> method_invocation -> cu",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> object_creation_expression -> argument_list -> method_invocation -> getColumnVisibility",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> object_creation_expression -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> EMPTY_BYTES",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> indexMuts",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> add",
        "program -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> m",
        "program -> return_statement -> indexMuts"
    ],
    "getIndexParams": [
        "program -> return_statement -> indexParams"
    ],
    "getIndexScanner": [
        "program -> return_statement -> indexScanner"
    ],
    "getIndexTableName": [
        "program -> return_statement -> method_invocation -> conf",
        "program -> return_statement -> method_invocation -> get",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> enumToConfKey",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> implementingClass",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> WriteOpts.INDEX_TABLE_NAME",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> WriteOpts.INDEX_TABLE_NAME"
    ],
    "getIndexTable": [
        "program -> return_statement -> method_invocation -> field_access -> this.conf",
        "program -> return_statement -> method_invocation -> field_access -> this.conf",
        "program -> return_statement -> method_invocation -> get",
        "program -> return_statement -> method_invocation -> argument_list -> INDEXTABLE_NAME"
    ],
    "getInputFormatClass": [
        "program -> return_statement -> class_literal -> HiveIcebergInputFormat"
    ],
    "getInstance": [
        "program -> if_statement -> parenthesized_expression -> binary_expression -> instance",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> LOG",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> info",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> \"UnitTestConcurrency: Instantiating the Phaser barrier\"",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> instance",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> TestUtilPhaser",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> argument_list",
        "program -> return_statement -> instance"
    ],
    "getIterators": [
        "program -> local_variable_declaration -> generic_type -> List",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> IteratorSetting",
        "program -> local_variable_declaration -> variable_declarator -> itrs",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> Lists",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> newArrayList",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> boolean",
        "program -> local_variable_declaration -> variable_declarator -> shouldPushdown",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> conf",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getBoolean",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloSerDeParameters.ITERATOR_PUSHDOWN_KEY",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloSerDeParameters.ITERATOR_PUSHDOWN_KEY",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloSerDeParameters.ITERATOR_PUSHDOWN_DEFAULT",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloSerDeParameters.ITERATOR_PUSHDOWN_DEFAULT",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> shouldPushdown",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> LOG",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> info",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> \"Iterator pushdown is disabled for this table\"",
        "program -> if_statement -> block -> return_statement -> itrs",
        "program -> local_variable_declaration -> boolean",
        "program -> local_variable_declaration -> variable_declarator -> binaryEncodedRow",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> field_access -> ColumnEncoding.BINARY",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> field_access -> ColumnEncoding.BINARY",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> getName",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> equalsIgnoreCase",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> method_invocation -> conf",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> method_invocation -> get",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> AccumuloSerDeParameters.DEFAULT_STORAGE_TYPE",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> AccumuloSerDeParameters.DEFAULT_STORAGE_TYPE",
        "program -> local_variable_declaration -> integral_type",
        "program -> local_variable_declaration -> variable_declarator -> rowIdOffset",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> columnMapper",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getRowIdOffset",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> array_type -> String",
        "program -> local_variable_declaration -> array_type -> dimensions",
        "program -> local_variable_declaration -> variable_declarator -> hiveColumnNamesArr",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> conf",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getStrings",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> serdeConstants.LIST_COLUMNS",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> serdeConstants.LIST_COLUMNS",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> hiveColumnNamesArr",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> IllegalArgumentException",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> \"Could not find Hive columns in configuration\"",
        "program -> local_variable_declaration -> String",
        "program -> local_variable_declaration -> variable_declarator -> hiveRowIdColumnName",
        "program -> local_variable_declaration -> variable_declarator -> null",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> rowIdOffset",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> 0",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> rowIdOffset",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> field_access -> hiveColumnNamesArr.length",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> field_access -> hiveColumnNamesArr.length",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> hiveRowIdColumnName",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> array_access -> hiveColumnNamesArr",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> array_access -> rowIdOffset",
        "program -> local_variable_declaration -> generic_type -> List",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> String",
        "program -> local_variable_declaration -> variable_declarator -> hiveColumnNames",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> Arrays",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> asList",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> hiveColumnNamesArr",
        "program -> enhanced_for_statement -> IndexSearchCondition",
        "program -> enhanced_for_statement -> sc",
        "program -> enhanced_for_statement -> method_invocation -> getSearchConditions",
        "program -> enhanced_for_statement -> method_invocation -> argument_list -> conf",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> String",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> col",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> sc",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> getColumnDesc",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> getColumn",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> hiveRowIdColumnName",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> null",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> hiveRowIdColumnName",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> equals",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> argument_list -> col",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> HiveAccumuloColumnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> mapping",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> HiveAccumuloColumnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> method_invocation -> columnMapper",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> method_invocation -> getColumnMappingForHiveColumn",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> method_invocation -> argument_list -> hiveColumnNames",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> method_invocation -> argument_list -> col",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> itrs",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> add",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> toSetting",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> mapping",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> sc",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> binaryEncodedRow",
        "program -> expression_statement -> method_invocation -> LOG",
        "program -> expression_statement -> method_invocation -> info",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> \"num iterators = \"",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> itrs",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> size",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> argument_list",
        "program -> return_statement -> itrs"
    ],
    "getKerberosToken": [
        "program -> try_statement -> block -> return_statement -> object_creation_expression -> KerberosToken",
        "program -> try_statement -> block -> return_statement -> object_creation_expression -> argument_list -> username",
        "program -> try_statement -> block -> return_statement -> object_creation_expression -> argument_list -> object_creation_expression -> File",
        "program -> try_statement -> block -> return_statement -> object_creation_expression -> argument_list -> object_creation_expression -> argument_list -> keytab",
        "program -> try_statement -> block -> return_statement -> object_creation_expression -> argument_list -> true",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> IOException",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> IllegalArgumentException",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> \"Failed to instantiate KerberosToken.\"",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> e"
    ],
    "getKeyEncoding": [
        "program -> return_statement -> keyEncoding"
    ],
    "getLength": [
        "program -> if_statement -> parenthesized_expression -> binary_expression -> length",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> field_access -> this.length",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> field_access -> this.length",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> method_invocation -> lazyStat",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> getLen",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list",
        "program -> return_statement -> length"
    ],
    "getLocations": [
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> locations",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> null",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> conf",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> null",
        "program -> if_statement -> block -> local_variable_declaration -> boolean",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> localityPreferred",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> conf",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> getBoolean",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> InputFormatConfig.LOCALITY",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> InputFormatConfig.LOCALITY",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> false",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> locations",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> ternary_expression -> localityPreferred",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> ternary_expression -> method_invocation -> Util",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> ternary_expression -> method_invocation -> blockLocations",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> ternary_expression -> method_invocation -> argument_list -> task",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> ternary_expression -> method_invocation -> argument_list -> conf",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> ternary_expression -> ANYWHERE",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> locations",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> ANYWHERE",
        "program -> return_statement -> locations"
    ],
    "getMapEncoding": [
        "program -> local_variable_declaration -> integral_type",
        "program -> local_variable_declaration -> variable_declarator -> index",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> columnEncoding",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> indexOf",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.COLON",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.COLON",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> 1",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> index",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> IllegalArgumentException",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> \"Serialized column encoding did not contain a pair of encodings to split\"",
        "program -> local_variable_declaration -> String",
        "program -> local_variable_declaration -> variable_declarator -> encoding1",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> columnEncoding",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> substring",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> 0",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> index",
        "program -> local_variable_declaration -> variable_declarator -> encoding2",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> columnEncoding",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> substring",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> binary_expression -> index",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> binary_expression -> 1",
        "program -> return_statement -> method_invocation -> Maps",
        "program -> return_statement -> method_invocation -> immutableEntry",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> get",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> encoding1",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> get",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> encoding2"
    ],
    "getMappingSpec": [
        "program -> return_statement -> mappingSpec"
    ],
    "getMapSize": [
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> getParsed",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> parse",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list",
        "program -> return_statement -> method_invocation -> cachedMap",
        "program -> return_statement -> method_invocation -> size",
        "program -> return_statement -> method_invocation -> argument_list"
    ],
    "getMapValueElement": [
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> getParsed",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> parse",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> generic_type -> scoped_type_identifier -> Map",
        "program -> enhanced_for_statement -> generic_type -> scoped_type_identifier -> Entry",
        "program -> enhanced_for_statement -> generic_type -> type_arguments -> Object",
        "program -> enhanced_for_statement -> generic_type -> type_arguments -> Object",
        "program -> enhanced_for_statement -> entry",
        "program -> enhanced_for_statement -> method_invocation -> cachedMap",
        "program -> enhanced_for_statement -> method_invocation -> entrySet",
        "program -> enhanced_for_statement -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> generic_type -> LazyPrimitive",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> generic_type -> type_arguments -> wildcard",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> generic_type -> type_arguments -> wildcard",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> lazyKeyI",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> generic_type -> LazyPrimitive",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> generic_type -> type_arguments -> wildcard",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> generic_type -> type_arguments -> wildcard",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> method_invocation -> entry",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> method_invocation -> getKey",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> Object",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> keyI",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> lazyKeyI",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> getWritableObject",
        "program -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> keyI",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> continue_statement",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> keyI",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> equals",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> key",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> Object",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> _value",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> entry",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> getValue",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> instanceof_expression -> _value",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> instanceof_expression -> LazyObject",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> generic_type -> LazyObject",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> generic_type -> type_arguments -> wildcard",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> v",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> generic_type -> LazyObject",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> generic_type -> type_arguments -> wildcard",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> method_invocation -> entry",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> method_invocation -> getValue",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> return_statement -> ternary_expression -> binary_expression -> v",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> return_statement -> ternary_expression -> binary_expression -> null",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> return_statement -> ternary_expression -> v",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> return_statement -> ternary_expression -> method_invocation -> v",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> return_statement -> ternary_expression -> method_invocation -> getObject",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> return_statement -> ternary_expression -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> return_statement -> _value",
        "program -> return_statement -> null"
    ],
    "getMap": [
        "program -> return_statement -> map"
    ],
    "getMaxIndexRows": [
        "program -> local_variable_declaration -> Configuration",
        "program -> local_variable_declaration -> variable_declarator -> conf",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> Configuration",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> expression_statement -> method_invocation -> conf",
        "program -> expression_statement -> method_invocation -> setInt",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> AccumuloIndexParameters.MAX_INDEX_ROWS",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> AccumuloIndexParameters.MAX_INDEX_ROWS",
        "program -> expression_statement -> method_invocation -> argument_list -> 10",
        "program -> local_variable_declaration -> integral_type",
        "program -> local_variable_declaration -> variable_declarator -> maxRows",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> object_creation_expression -> AccumuloIndexParameters",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> object_creation_expression -> argument_list -> conf",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getMaxIndexRows",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> assertEquals",
        "program -> expression_statement -> method_invocation -> argument_list -> 10",
        "program -> expression_statement -> method_invocation -> argument_list -> maxRows"
    ],
    "getMaxRowIds": [
        "program -> return_statement -> maxRowIds"
    ],
    "getMetaHook": [
        "program -> return_statement -> object_creation_expression -> HiveIcebergMetaHook",
        "program -> return_statement -> object_creation_expression -> argument_list -> conf"
    ],
    "getName": [
        "program -> return_statement -> \"Blackhole Operator\""
    ],
    "getOutputFormatClass": [
        "program -> return_statement -> class_literal -> HiveIcebergOutputFormat"
    ],
    "getPairCollection": [
        "program -> local_variable_declaration -> modifiers",
        "program -> local_variable_declaration -> generic_type -> HashSet",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> generic_type -> Pair",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> generic_type -> type_arguments -> Text",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> generic_type -> type_arguments -> Text",
        "program -> local_variable_declaration -> variable_declarator -> pairs",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> HashSet",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> type_arguments -> generic_type -> Pair",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> type_arguments -> generic_type -> type_arguments -> Text",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> type_arguments -> generic_type -> type_arguments -> Text",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> enhanced_for_statement -> ColumnMapping",
        "program -> enhanced_for_statement -> columnMapping",
        "program -> enhanced_for_statement -> columnMappings",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> instanceof_expression -> columnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> instanceof_expression -> HiveAccumuloColumnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> HiveAccumuloColumnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> accumuloColumnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> HiveAccumuloColumnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> columnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> Text",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cf",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> Text",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> accumuloColumnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> getColumnFamily",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> Text",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cq",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> null",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> accumuloColumnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> getColumnQualifier",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> cq",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> Text",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> argument_list -> method_invocation -> accumuloColumnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> argument_list -> method_invocation -> getColumnQualifier",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> argument_list -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> pairs",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> add",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> object_creation_expression -> generic_type -> Pair",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> object_creation_expression -> generic_type -> type_arguments -> Text",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> object_creation_expression -> generic_type -> type_arguments -> Text",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> object_creation_expression -> argument_list -> cf",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> object_creation_expression -> argument_list -> cq",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> parenthesized_expression -> instanceof_expression -> columnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> parenthesized_expression -> instanceof_expression -> HiveAccumuloMapColumnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> local_variable_declaration -> HiveAccumuloMapColumnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> mapMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> HiveAccumuloMapColumnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> columnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> pairs",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> add",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> object_creation_expression -> generic_type -> Pair",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> object_creation_expression -> generic_type -> type_arguments -> Text",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> object_creation_expression -> generic_type -> type_arguments -> Text",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> object_creation_expression -> argument_list -> object_creation_expression -> Text",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> object_creation_expression -> argument_list -> object_creation_expression -> argument_list -> method_invocation -> mapMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> object_creation_expression -> argument_list -> object_creation_expression -> argument_list -> method_invocation -> getColumnFamily",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> object_creation_expression -> argument_list -> object_creation_expression -> argument_list -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> object_creation_expression -> argument_list -> null",
        "program -> expression_statement -> method_invocation -> log",
        "program -> expression_statement -> method_invocation -> info",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> binary_expression -> \"Computed columns to fetch (\"",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> binary_expression -> pairs",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> \") from \"",
        "program -> expression_statement -> method_invocation -> argument_list -> binary_expression -> columnMappings",
        "program -> return_statement -> pairs"
    ],
    "getpCompare": [
        "program -> return_statement -> pCompare"
    ],
    "getPos": [
        "program -> return_statement -> position"
    ],
    "getPrimitiveCompare": [
        "program -> return_statement -> comp"
    ],
    "getPrimitiveComparisonClass": [
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> pComparisons",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> containsKey",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> argument_list -> type",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> NoSuchPrimitiveComparisonException",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"Null primitive comparison for specified key: \"",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> type",
        "program -> return_statement -> method_invocation -> pComparisons",
        "program -> return_statement -> method_invocation -> get",
        "program -> return_statement -> method_invocation -> argument_list -> type"
    ],
    "getPrimitiveComparison": [
        "program -> local_variable_declaration -> generic_type -> Class",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> wildcard -> PrimitiveComparison",
        "program -> local_variable_declaration -> variable_declarator -> clz",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getPrimitiveComparisonClass",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> type",
        "program -> try_statement -> block -> return_statement -> method_invocation -> clz",
        "program -> try_statement -> block -> return_statement -> method_invocation -> newInstance",
        "program -> try_statement -> block -> return_statement -> method_invocation -> argument_list",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> ClassCastException",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> SerDeException",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> \"Column type mismatch in WHERE clause \"",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> method_invocation -> sc",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> method_invocation -> getIndexExpr",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> getExprString",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> binary_expression -> \" found type \"",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> method_invocation -> sc",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> method_invocation -> getConstantDesc",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> getTypeString",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> binary_expression -> \" instead of \"",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> method_invocation -> sc",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> method_invocation -> getColumnDesc",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> getTypeString",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> argument_list",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> IllegalAccessException",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> SerDeException",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> \"Could not instantiate class for WHERE clause\"",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> e",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> InstantiationException",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> SerDeException",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> \"Could not instantiate class for WHERE clause\"",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> e"
    ],
    "getProgress": [
        "program -> return_statement -> 0"
    ],
    "getRange": [
        "program -> local_variable_declaration -> generic_type -> Class",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> wildcard -> CompareOp",
        "program -> local_variable_declaration -> variable_declarator -> opClz",
        "program -> try_statement -> block -> expression_statement -> assignment_expression -> opClz",
        "program -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> predicateHandler",
        "program -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> getCompareOpClass",
        "program -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> method_invocation -> genericUdf",
        "program -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> method_invocation -> getUdfName",
        "program -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> NoSuchCompareOpException",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> IllegalArgumentException",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"Unhandled UDF class: \"",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> genericUdf",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> getUdfName",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> instanceof_expression -> leftHandNode",
        "program -> if_statement -> parenthesized_expression -> instanceof_expression -> ExprNodeConstantDesc",
        "program -> if_statement -> block -> return_statement -> method_invocation -> getConstantOpColumnRange",
        "program -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> opClz",
        "program -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> constText",
        "program -> if_statement -> if_statement -> parenthesized_expression -> instanceof_expression -> leftHandNode",
        "program -> if_statement -> if_statement -> parenthesized_expression -> instanceof_expression -> ExprNodeColumnDesc",
        "program -> if_statement -> if_statement -> block -> return_statement -> method_invocation -> getColumnOpConstantRange",
        "program -> if_statement -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> opClz",
        "program -> if_statement -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> constText",
        "program -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> IllegalStateException",
        "program -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> \"Expected column or constant on LHS of expression\""
    ],
    "getRawType": [
        "program -> if_statement -> parenthesized_expression -> binary_expression -> hiveType",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> block -> return_statement -> method_invocation -> method_invocation -> method_invocation -> hiveType",
        "program -> if_statement -> block -> return_statement -> method_invocation -> method_invocation -> method_invocation -> toLowerCase",
        "program -> if_statement -> block -> return_statement -> method_invocation -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> block -> return_statement -> method_invocation -> method_invocation -> replaceFirst",
        "program -> if_statement -> block -> return_statement -> method_invocation -> method_invocation -> argument_list -> DIM_PAT",
        "program -> if_statement -> block -> return_statement -> method_invocation -> method_invocation -> argument_list -> \"\"",
        "program -> if_statement -> block -> return_statement -> method_invocation -> trim",
        "program -> if_statement -> block -> return_statement -> method_invocation -> argument_list",
        "program -> return_statement -> hiveType"
    ],
    "getRecordEncoding": [
        "program -> return_statement -> method_invocation -> Boolean",
        "program -> return_statement -> method_invocation -> valueOf",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> conf",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> get",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> enumToConfKey",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> argument_list -> implementingClass",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> WriteOpts.BINARY_ENCODING",
        "program -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> WriteOpts.BINARY_ENCODING"
    ],
    "getRecordReader": [
        "program -> return_statement -> method_invocation -> storageFormatTest",
        "program -> return_statement -> method_invocation -> getRecordReader",
        "program -> return_statement -> method_invocation -> argument_list -> readPath"
    ],
    "getRecordWriter": [
        "program -> return_statement -> method_invocation -> storageFormatTest",
        "program -> return_statement -> method_invocation -> getRecordWriter",
        "program -> return_statement -> method_invocation -> argument_list -> recordWriterPath"
    ],
    "getRowIdMapping": [
        "program -> return_statement -> rowIdMapping"
    ],
    "getRowIdOffset": [
        "program -> return_statement -> method_invocation -> columnMapper",
        "program -> return_statement -> method_invocation -> getRowIdOffset",
        "program -> return_statement -> method_invocation -> argument_list"
    ],
    "getRowId": [
        "program -> local_variable_declaration -> VirtualColumn",
        "program -> local_variable_declaration -> variable_declarator -> rowId",
        "program -> local_variable_declaration -> variable_declarator -> field_access -> VirtualColumn.ROW_POSITION",
        "program -> local_variable_declaration -> variable_declarator -> field_access -> VirtualColumn.ROW_POSITION",
        "program -> return_statement -> object_creation_expression -> FieldSchema",
        "program -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> rowId",
        "program -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> getName",
        "program -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> argument_list",
        "program -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> method_invocation -> rowId",
        "program -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> method_invocation -> getTypeInfo",
        "program -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> method_invocation -> argument_list",
        "program -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> getTypeName",
        "program -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> argument_list",
        "program -> return_statement -> object_creation_expression -> argument_list -> \"\""
    ],
    "getSearchConditions": [
        "program -> local_variable_declaration -> modifiers",
        "program -> local_variable_declaration -> generic_type -> List",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> IndexSearchCondition",
        "program -> local_variable_declaration -> variable_declarator -> sConditions",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> Lists",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> newArrayList",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> ExprNodeDesc",
        "program -> local_variable_declaration -> variable_declarator -> filterExpr",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getExpression",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> conf",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> filterExpr",
        "program -> if_statement -> block -> return_statement -> sConditions",
        "program -> local_variable_declaration -> IndexPredicateAnalyzer",
        "program -> local_variable_declaration -> variable_declarator -> analyzer",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> newAnalyzer",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> conf",
        "program -> local_variable_declaration -> ExprNodeDesc",
        "program -> local_variable_declaration -> variable_declarator -> residual",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> analyzer",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> analyzePredicate",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> filterExpr",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> sConditions",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> residual",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> RuntimeException",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"Unexpected residual predicate: \"",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> residual",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> getExprString",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> argument_list",
        "program -> return_statement -> sConditions"
    ],
    "getSerDeClass": [
        "program -> return_statement -> class_literal -> HiveIcebergSerDe"
    ],
    "getSplits": [
        "program -> return_statement -> splits"
    ],
    "getSplit": [
        "program -> return_statement -> field_access -> this.split",
        "program -> return_statement -> field_access -> this.split"
    ],
    "getStringEncoding": [
        "program -> return_statement -> method_invocation -> IndexOutputConfigurator",
        "program -> return_statement -> method_invocation -> getRecordEncoding",
        "program -> return_statement -> method_invocation -> argument_list -> CLASS",
        "program -> return_statement -> method_invocation -> argument_list -> job"
    ],
    "getTableAuths": [
        "program -> local_variable_declaration -> String",
        "program -> local_variable_declaration -> variable_declarator -> auths",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> conf",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> get",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloSerDeParameters.AUTHORIZATIONS_KEY",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloSerDeParameters.AUTHORIZATIONS_KEY",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> auths",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> null",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> auths",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> isEmpty",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> block -> return_statement -> object_creation_expression -> Authorizations",
        "program -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> method_invocation -> auths",
        "program -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> method_invocation -> trim",
        "program -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> getBytes",
        "program -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> argument_list -> field_access -> StandardCharsets.UTF_8",
        "program -> if_statement -> block -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> argument_list -> field_access -> StandardCharsets.UTF_8",
        "program -> return_statement -> object_creation_expression -> Authorizations",
        "program -> return_statement -> object_creation_expression -> argument_list"
    ],
    "getTableName": [
        "program -> return_statement -> \"AcidTable\""
    ],
    "getTuples": [
        "program -> return_statement -> method_invocation -> Collections",
        "program -> return_statement -> method_invocation -> unmodifiableList",
        "program -> return_statement -> method_invocation -> argument_list -> tuples"
    ],
    "getTypesString": [
        "program -> local_variable_declaration -> StringBuilder",
        "program -> local_variable_declaration -> variable_declarator -> sb",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> StringBuilder",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> enhanced_for_statement -> ColumnMapping",
        "program -> enhanced_for_statement -> columnMapping",
        "program -> enhanced_for_statement -> columnMappings",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> sb",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> length",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> 0",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> sb",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> append",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.COLON",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.COLON",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> instanceof_expression -> columnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> instanceof_expression -> HiveAccumuloRowIdColumnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> sb",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> append",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> serdeConstants.STRING_TYPE_NAME",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> serdeConstants.STRING_TYPE_NAME",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> parenthesized_expression -> instanceof_expression -> columnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> parenthesized_expression -> instanceof_expression -> HiveAccumuloColumnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> sb",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> append",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> serdeConstants.STRING_TYPE_NAME",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> serdeConstants.STRING_TYPE_NAME",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> instanceof_expression -> columnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> parenthesized_expression -> instanceof_expression -> HiveAccumuloMapColumnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> sb",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> append",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> argument_list -> field_access -> serdeConstants.MAP_TYPE_NAME",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> argument_list -> field_access -> serdeConstants.MAP_TYPE_NAME",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> append",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> argument_list -> \"<\"",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> append",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> argument_list -> field_access -> serdeConstants.STRING_TYPE_NAME",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> method_invocation -> method_invocation -> argument_list -> field_access -> serdeConstants.STRING_TYPE_NAME",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> method_invocation -> append",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> method_invocation -> argument_list -> \",\"",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> append",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> argument_list -> field_access -> serdeConstants.STRING_TYPE_NAME",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> argument_list -> field_access -> serdeConstants.STRING_TYPE_NAME",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> append",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> \">\"",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> IllegalArgumentException",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"Cannot process ColumnMapping of type \"",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> method_invocation -> columnMapping",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> method_invocation -> getClass",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> getName",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> argument_list",
        "program -> return_statement -> method_invocation -> sb",
        "program -> return_statement -> method_invocation -> toString",
        "program -> return_statement -> method_invocation -> argument_list"
    ],
    "getUtf8Value": [
        "program -> return_statement -> object_creation_expression -> Text",
        "program -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> method_invocation -> objInspector",
        "program -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> method_invocation -> getWritableConstantValue",
        "program -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> method_invocation -> argument_list",
        "program -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> toString",
        "program -> return_statement -> object_creation_expression -> argument_list -> method_invocation -> argument_list"
    ],
    "getValueEncoding": [
        "program -> return_statement -> valueEncoding"
    ],
    "getValue": [
        "program -> return_statement -> value"
    ],
    "getZooKeepers": [
        "program -> expression_statement -> method_invocation -> Preconditions",
        "program -> expression_statement -> method_invocation -> checkNotNull",
        "program -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> return_statement -> method_invocation -> conf",
        "program -> return_statement -> method_invocation -> get",
        "program -> return_statement -> method_invocation -> argument_list -> ZOOKEEPERS"
    ],
    "greaterThanOrEqual": [
        "program -> local_variable_declaration -> GreaterThanOrEqual",
        "program -> local_variable_declaration -> variable_declarator -> greaterThanOrEqualObj",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> GreaterThanOrEqual",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> strCompare",
        "program -> local_variable_declaration -> array_type -> integral_type",
        "program -> local_variable_declaration -> array_type -> dimensions",
        "program -> local_variable_declaration -> variable_declarator -> val",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> \"aab\"",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getBytes",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> assertTrue",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> greaterThanOrEqualObj",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> accept",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> val",
        "program -> expression_statement -> assignment_expression -> val",
        "program -> expression_statement -> assignment_expression -> method_invocation -> \"aa\"",
        "program -> expression_statement -> assignment_expression -> method_invocation -> getBytes",
        "program -> expression_statement -> assignment_expression -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> assertFalse",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> greaterThanOrEqualObj",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> accept",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> val",
        "program -> expression_statement -> assignment_expression -> val",
        "program -> expression_statement -> assignment_expression -> method_invocation -> \"aaa\"",
        "program -> expression_statement -> assignment_expression -> method_invocation -> getBytes",
        "program -> expression_statement -> assignment_expression -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> assertTrue",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> greaterThanOrEqualObj",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> accept",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> val"
    ],
    "greaterThan": [
        "program -> local_variable_declaration -> GreaterThan",
        "program -> local_variable_declaration -> variable_declarator -> greaterThanObj",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> GreaterThan",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> strCompare",
        "program -> local_variable_declaration -> array_type -> integral_type",
        "program -> local_variable_declaration -> array_type -> dimensions",
        "program -> local_variable_declaration -> variable_declarator -> val",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> \"aab\"",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getBytes",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> assertTrue",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> greaterThanObj",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> accept",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> val",
        "program -> expression_statement -> assignment_expression -> val",
        "program -> expression_statement -> assignment_expression -> method_invocation -> \"aa\"",
        "program -> expression_statement -> assignment_expression -> method_invocation -> getBytes",
        "program -> expression_statement -> assignment_expression -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> assertFalse",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> greaterThanObj",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> accept",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> val",
        "program -> expression_statement -> assignment_expression -> val",
        "program -> expression_statement -> assignment_expression -> method_invocation -> \"aaa\"",
        "program -> expression_statement -> assignment_expression -> method_invocation -> getBytes",
        "program -> expression_statement -> assignment_expression -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> assertFalse",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> greaterThanObj",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> accept",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> val"
    ],
    "hasColumnEncoding": [
        "program -> expression_statement -> method_invocation -> Preconditions",
        "program -> expression_statement -> method_invocation -> checkNotNull",
        "program -> expression_statement -> method_invocation -> argument_list -> columnMapping",
        "program -> local_variable_declaration -> integral_type",
        "program -> local_variable_declaration -> variable_declarator -> offset",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> columnMapping",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> lastIndexOf",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.POUND",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.POUND",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> 0",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> offset",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> field_access -> AccumuloHiveConstants.ESCAPE",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> field_access -> AccumuloHiveConstants.ESCAPE",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> columnMapping",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> charAt",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list -> binary_expression -> offset",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list -> binary_expression -> 1",
        "program -> if_statement -> block -> return_statement -> false",
        "program -> return_statement -> binary_expression -> unary_expression -> 1",
        "program -> return_statement -> binary_expression -> offset"
    ],
    "hasFamAndQual": [
        "program -> enhanced_for_statement -> ColumnTuple",
        "program -> enhanced_for_statement -> tuple",
        "program -> enhanced_for_statement -> tuples",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> method_invocation -> tuple",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> method_invocation -> getCf",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> equals",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> fam",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> method_invocation -> tuple",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> method_invocation -> getCq",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> equals",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> qual",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> return_statement -> true",
        "program -> return_statement -> false"
    ],
    "hasRowIdMapping": [
        "program -> return_statement -> binary_expression -> null",
        "program -> return_statement -> binary_expression -> rowIdMapping"
    ],
    "hexDump": [
        "program -> local_variable_declaration -> StringBuilder",
        "program -> local_variable_declaration -> variable_declarator -> sb",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> StringBuilder",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> local_variable_declaration -> array_type -> integral_type",
        "program -> local_variable_declaration -> array_type -> dimensions",
        "program -> local_variable_declaration -> variable_declarator -> arr",
        "program -> local_variable_declaration -> variable_declarator -> ba",
        "program -> local_variable_declaration -> integral_type",
        "program -> local_variable_declaration -> variable_declarator -> len",
        "program -> local_variable_declaration -> variable_declarator -> field_access -> ba.length",
        "program -> local_variable_declaration -> variable_declarator -> field_access -> ba.length",
        "program -> for_statement -> local_variable_declaration -> integral_type",
        "program -> for_statement -> local_variable_declaration -> variable_declarator -> i",
        "program -> for_statement -> local_variable_declaration -> variable_declarator -> 0",
        "program -> for_statement -> binary_expression -> i",
        "program -> for_statement -> binary_expression -> len",
        "program -> for_statement -> update_expression -> i",
        "program -> for_statement -> block -> local_variable_declaration -> integral_type",
        "program -> for_statement -> block -> local_variable_declaration -> variable_declarator -> b",
        "program -> for_statement -> block -> local_variable_declaration -> variable_declarator -> array_access -> arr",
        "program -> for_statement -> block -> local_variable_declaration -> variable_declarator -> array_access -> i",
        "program -> for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> b",
        "program -> for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> 32",
        "program -> for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> b",
        "program -> for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> 126",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> sb",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> append",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> cast_expression -> integral_type",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> cast_expression -> b",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> sb",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> append",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> String",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> format",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> \"x%02x\"",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> array_creation_expression -> Object",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> array_creation_expression -> dimensions",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> array_creation_expression -> array_initializer -> method_invocation -> Byte",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> array_creation_expression -> array_initializer -> method_invocation -> valueOf",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> array_creation_expression -> array_initializer -> method_invocation -> argument_list -> b",
        "program -> return_statement -> method_invocation -> sb",
        "program -> return_statement -> method_invocation -> toString",
        "program -> return_statement -> method_invocation -> argument_list"
    ],
    "init": [
        "program -> expression_statement -> method_invocation -> userMap",
        "program -> expression_statement -> method_invocation -> put",
        "program -> expression_statement -> method_invocation -> argument_list -> correctUser",
        "program -> expression_statement -> method_invocation -> argument_list -> correctPassword"
    ],
    "isEqual": [
        "program -> return_statement -> method_invocation -> method_invocation -> serialize",
        "program -> return_statement -> method_invocation -> method_invocation -> argument_list -> value",
        "program -> return_statement -> method_invocation -> equals",
        "program -> return_statement -> method_invocation -> argument_list -> constant"
    ],
    "isIndexed": [
        "program -> return_statement -> false"
    ],
    "isMapEncoding": [
        "program -> return_statement -> binary_expression -> unary_expression -> 1",
        "program -> return_statement -> binary_expression -> method_invocation -> columnEncoding",
        "program -> return_statement -> binary_expression -> method_invocation -> indexOf",
        "program -> return_statement -> binary_expression -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.COLON",
        "program -> return_statement -> binary_expression -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.COLON"
    ],
    "isNotEqual": [
        "program -> return_statement -> unary_expression -> method_invocation -> isEqual",
        "program -> return_statement -> unary_expression -> method_invocation -> argument_list -> value"
    ],
    "isPrefix": [
        "program -> expression_statement -> method_invocation -> Preconditions",
        "program -> expression_statement -> method_invocation -> checkNotNull",
        "program -> expression_statement -> method_invocation -> argument_list -> maybePrefix",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> field_access -> AccumuloHiveConstants.ASTERISK",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> field_access -> AccumuloHiveConstants.ASTERISK",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> maybePrefix",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> charAt",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> binary_expression -> method_invocation -> maybePrefix",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> binary_expression -> method_invocation -> length",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> binary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> binary_expression -> 1",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> maybePrefix",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> length",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> 1",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> binary_expression -> field_access -> AccumuloHiveConstants.ESCAPE",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> binary_expression -> field_access -> AccumuloHiveConstants.ESCAPE",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> binary_expression -> method_invocation -> maybePrefix",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> binary_expression -> method_invocation -> charAt",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> binary_expression -> method_invocation -> argument_list -> binary_expression -> method_invocation -> maybePrefix",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> binary_expression -> method_invocation -> argument_list -> binary_expression -> method_invocation -> length",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> binary_expression -> method_invocation -> argument_list -> binary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> binary_expression -> method_invocation -> argument_list -> binary_expression -> 2",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> true",
        "program -> return_statement -> false"
    ],
    "isPurge": [
        "program -> return_statement -> binary_expression -> unary_expression -> method_invocation -> MetaStoreUtils",
        "program -> return_statement -> binary_expression -> unary_expression -> method_invocation -> isExternalTable",
        "program -> return_statement -> binary_expression -> unary_expression -> method_invocation -> argument_list -> table",
        "program -> return_statement -> binary_expression -> method_invocation -> MetaStoreUtils",
        "program -> return_statement -> binary_expression -> method_invocation -> isExternalTablePurge",
        "program -> return_statement -> binary_expression -> method_invocation -> argument_list -> table"
    ],
    "lessThanOrEqual": [
        "program -> local_variable_declaration -> LessThanOrEqual",
        "program -> local_variable_declaration -> variable_declarator -> lessThanOrEqualObj",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> LessThanOrEqual",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> strCompare",
        "program -> local_variable_declaration -> array_type -> integral_type",
        "program -> local_variable_declaration -> array_type -> dimensions",
        "program -> local_variable_declaration -> variable_declarator -> val",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> \"aab\"",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getBytes",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> assertFalse",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> lessThanOrEqualObj",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> accept",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> val",
        "program -> expression_statement -> assignment_expression -> val",
        "program -> expression_statement -> assignment_expression -> method_invocation -> \"aa\"",
        "program -> expression_statement -> assignment_expression -> method_invocation -> getBytes",
        "program -> expression_statement -> assignment_expression -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> assertTrue",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> lessThanOrEqualObj",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> accept",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> val",
        "program -> expression_statement -> assignment_expression -> val",
        "program -> expression_statement -> assignment_expression -> method_invocation -> \"aaa\"",
        "program -> expression_statement -> assignment_expression -> method_invocation -> getBytes",
        "program -> expression_statement -> assignment_expression -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> assertTrue",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> lessThanOrEqualObj",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> accept",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> val"
    ],
    "lessThan": [
        "program -> local_variable_declaration -> LessThan",
        "program -> local_variable_declaration -> variable_declarator -> lessThanObj",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> LessThan",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> strCompare",
        "program -> local_variable_declaration -> array_type -> integral_type",
        "program -> local_variable_declaration -> array_type -> dimensions",
        "program -> local_variable_declaration -> variable_declarator -> val",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> \"aab\"",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getBytes",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> assertFalse",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> lessThanObj",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> accept",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> val",
        "program -> expression_statement -> assignment_expression -> val",
        "program -> expression_statement -> assignment_expression -> method_invocation -> \"aa\"",
        "program -> expression_statement -> assignment_expression -> method_invocation -> getBytes",
        "program -> expression_statement -> assignment_expression -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> assertTrue",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> lessThanObj",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> accept",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> val",
        "program -> expression_statement -> assignment_expression -> val",
        "program -> expression_statement -> assignment_expression -> method_invocation -> \"aaa\"",
        "program -> expression_statement -> assignment_expression -> method_invocation -> getBytes",
        "program -> expression_statement -> assignment_expression -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> assertFalse",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> lessThanObj",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> accept",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> val"
    ],
    "like": [
        "program -> local_variable_declaration -> Like",
        "program -> local_variable_declaration -> variable_declarator -> likeObj",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> Like",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> strCompare",
        "program -> local_variable_declaration -> String",
        "program -> local_variable_declaration -> variable_declarator -> condition",
        "program -> local_variable_declaration -> variable_declarator -> \"%a\"",
        "program -> expression_statement -> method_invocation -> assertTrue",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> likeObj",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> accept",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> condition",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> getBytes",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> expression_statement -> assignment_expression -> condition",
        "program -> expression_statement -> assignment_expression -> \"%a%\"",
        "program -> expression_statement -> method_invocation -> assertTrue",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> likeObj",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> accept",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> condition",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> getBytes",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> expression_statement -> assignment_expression -> condition",
        "program -> expression_statement -> assignment_expression -> \"a%\"",
        "program -> expression_statement -> method_invocation -> assertTrue",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> likeObj",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> accept",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> condition",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> getBytes",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> expression_statement -> assignment_expression -> condition",
        "program -> expression_statement -> assignment_expression -> \"a%aa\"",
        "program -> expression_statement -> method_invocation -> assertFalse",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> likeObj",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> accept",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> condition",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> getBytes",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> expression_statement -> assignment_expression -> condition",
        "program -> expression_statement -> assignment_expression -> \"b%\"",
        "program -> expression_statement -> method_invocation -> assertFalse",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> likeObj",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> accept",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> condition",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> getBytes",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> expression_statement -> assignment_expression -> condition",
        "program -> expression_statement -> assignment_expression -> \"%ab%\"",
        "program -> expression_statement -> method_invocation -> assertFalse",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> likeObj",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> accept",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> condition",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> getBytes",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> expression_statement -> assignment_expression -> condition",
        "program -> expression_statement -> assignment_expression -> \"%ba\"",
        "program -> expression_statement -> method_invocation -> assertFalse",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> likeObj",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> accept",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> condition",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> getBytes",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> argument_list"
    ],
    "loadDependentJars": [
        "program -> local_variable_declaration -> modifiers -> annotation -> SuppressWarnings",
        "program -> local_variable_declaration -> modifiers -> annotation -> annotation_argument_list -> \"deprecation\"",
        "program -> local_variable_declaration -> generic_type -> List",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> generic_type -> Class",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> generic_type -> type_arguments -> wildcard",
        "program -> local_variable_declaration -> variable_declarator -> classesToLoad",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> ArrayList",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> type_arguments",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> Arrays",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> asList",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> argument_list -> class_literal -> Tracer",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> argument_list -> class_literal -> Fate",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> argument_list -> class_literal -> Connector",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> argument_list -> class_literal -> Main",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> argument_list -> class_literal -> ZooKeeper",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> method_invocation -> argument_list -> class_literal -> AccumuloStorageHandler",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> classesToLoad",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> add",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> Class",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> forName",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> \"org.apache.htrace.Trace\"",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> Exception",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> log",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> warn",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> \"Failed to load class for HTrace jar, trying to continue\"",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> e",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> JarUtils",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> addDependencyJars",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> classesToLoad",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> IOException",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> log",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> error",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> \"Could not add necessary Accumulo dependencies to classpath\"",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> e"
    ],
    "matchQualAndFam": [
        "program -> expression_statement -> method_invocation -> k",
        "program -> expression_statement -> method_invocation -> getColumnFamily",
        "program -> expression_statement -> method_invocation -> argument_list -> cfHolder",
        "program -> expression_statement -> method_invocation -> k",
        "program -> expression_statement -> method_invocation -> getColumnQualifier",
        "program -> expression_statement -> method_invocation -> argument_list -> cqHolder",
        "program -> return_statement -> binary_expression -> method_invocation -> cfHolder",
        "program -> return_statement -> binary_expression -> method_invocation -> equals",
        "program -> return_statement -> binary_expression -> method_invocation -> argument_list -> columnMappingFamily",
        "program -> return_statement -> binary_expression -> method_invocation -> cqHolder",
        "program -> return_statement -> binary_expression -> method_invocation -> equals",
        "program -> return_statement -> binary_expression -> method_invocation -> argument_list -> columnMappingQualifier"
    ],
    "mergeTokenIntoJobConf": [
        "program -> local_variable_declaration -> JobConf",
        "program -> local_variable_declaration -> variable_declarator -> accumuloJobConf",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> JobConf",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> jobConf",
        "program -> expression_statement -> method_invocation -> method_invocation -> accumuloJobConf",
        "program -> expression_statement -> method_invocation -> method_invocation -> getCredentials",
        "program -> expression_statement -> method_invocation -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> addToken",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> accumuloToken",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getService",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> argument_list -> accumuloToken",
        "program -> expression_statement -> method_invocation -> method_invocation -> ShimLoader",
        "program -> expression_statement -> method_invocation -> method_invocation -> getHadoopShims",
        "program -> expression_statement -> method_invocation -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> mergeCredentials",
        "program -> expression_statement -> method_invocation -> argument_list -> jobConf",
        "program -> expression_statement -> method_invocation -> argument_list -> accumuloJobConf"
    ],
    "newAnalyzer": [
        "program -> local_variable_declaration -> IndexPredicateAnalyzer",
        "program -> local_variable_declaration -> variable_declarator -> analyzer",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> IndexPredicateAnalyzer",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> expression_statement -> method_invocation -> analyzer",
        "program -> expression_statement -> method_invocation -> clearAllowedColumnNames",
        "program -> expression_statement -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> String",
        "program -> enhanced_for_statement -> op",
        "program -> enhanced_for_statement -> method_invocation -> cOpKeyset",
        "program -> enhanced_for_statement -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> analyzer",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> addComparisonOp",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> op",
        "program -> local_variable_declaration -> array_type -> String",
        "program -> local_variable_declaration -> array_type -> dimensions",
        "program -> local_variable_declaration -> variable_declarator -> hiveColumnNames",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> conf",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getStrings",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> serdeConstants.LIST_COLUMNS",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> serdeConstants.LIST_COLUMNS",
        "program -> enhanced_for_statement -> String",
        "program -> enhanced_for_statement -> col",
        "program -> enhanced_for_statement -> hiveColumnNames",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> analyzer",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> allowColumnName",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> col",
        "program -> return_statement -> analyzer"
    ],
    "next": [
        "program -> if_statement -> parenthesized_expression -> binary_expression -> update_expression -> idx",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> field_access -> keys.length",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> field_access -> keys.length",
        "program -> if_statement -> return_statement -> false",
        "program -> return_statement -> true"
    ],
    "parseMapping": [
        "program -> local_variable_declaration -> integral_type",
        "program -> local_variable_declaration -> variable_declarator -> index",
        "program -> local_variable_declaration -> variable_declarator -> 0",
        "program -> while_statement -> parenthesized_expression -> true",
        "program -> while_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> index",
        "program -> while_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> columnSpec",
        "program -> while_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> length",
        "program -> while_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> while_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> log",
        "program -> while_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> error",
        "program -> while_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> \"Cannot parse '\"",
        "program -> while_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> columnSpec",
        "program -> while_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> \"' as colon-separated column configuration\"",
        "program -> while_statement -> block -> if_statement -> block -> throw_statement -> object_creation_expression -> InvalidColumnMappingException",
        "program -> while_statement -> block -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> \"Columns must be provided as colon-separated family and qualifier pairs\"",
        "program -> while_statement -> block -> expression_statement -> assignment_expression -> index",
        "program -> while_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> columnSpec",
        "program -> while_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> indexOf",
        "program -> while_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.COLON",
        "program -> while_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.COLON",
        "program -> while_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> index",
        "program -> while_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> 1",
        "program -> while_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> index",
        "program -> while_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> log",
        "program -> while_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> error",
        "program -> while_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> \"Cannot parse '\"",
        "program -> while_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> columnSpec",
        "program -> while_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> \"' as colon-separated column configuration\"",
        "program -> while_statement -> block -> if_statement -> block -> throw_statement -> object_creation_expression -> InvalidColumnMappingException",
        "program -> while_statement -> block -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> \"Columns must be provided as colon-separated family and qualifier pairs\"",
        "program -> while_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> index",
        "program -> while_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> 1",
        "program -> while_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> 0",
        "program -> while_statement -> block -> if_statement -> block -> local_variable_declaration -> integral_type",
        "program -> while_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> testChar",
        "program -> while_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> columnSpec",
        "program -> while_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> charAt",
        "program -> while_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> binary_expression -> index",
        "program -> while_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> binary_expression -> 1",
        "program -> while_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> field_access -> AccumuloHiveConstants.ESCAPE",
        "program -> while_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> field_access -> AccumuloHiveConstants.ESCAPE",
        "program -> while_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> testChar",
        "program -> while_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> update_expression -> index",
        "program -> while_statement -> block -> if_statement -> block -> if_statement -> block -> continue_statement",
        "program -> while_statement -> block -> break_statement",
        "program -> local_variable_declaration -> String",
        "program -> local_variable_declaration -> variable_declarator -> cf",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> columnSpec",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> substring",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> 0",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> index",
        "program -> local_variable_declaration -> variable_declarator -> cq",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> columnSpec",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> substring",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> binary_expression -> index",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> binary_expression -> 1",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> 1",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> cf",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> indexOf",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.ESCAPED_COLON",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.ESCAPED_COLON",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> cf",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> cf",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> replaceAll",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.ESCAPED_COLON_REGEX",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.ESCAPED_COLON_REGEX",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> method_invocation -> Character",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> method_invocation -> toString",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.COLON",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.COLON",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> 1",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> cq",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> indexOf",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.ESCAPED_COLON",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.ESCAPED_COLON",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> cq",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> cq",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> replaceAll",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.ESCAPED_COLON_REGEX",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.ESCAPED_COLON_REGEX",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> method_invocation -> Character",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> method_invocation -> toString",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.COLON",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.COLON",
        "program -> return_statement -> method_invocation -> Maps",
        "program -> return_statement -> method_invocation -> immutableEntry",
        "program -> return_statement -> method_invocation -> argument_list -> cf",
        "program -> return_statement -> method_invocation -> argument_list -> cq"
    ],
    "parse": [
        "program -> local_variable_declaration -> HplsqlLexer",
        "program -> local_variable_declaration -> variable_declarator -> lexer",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> HplsqlLexer",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> object_creation_expression -> ANTLRInputStream",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> object_creation_expression -> argument_list -> method_invocation -> proc",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> object_creation_expression -> argument_list -> method_invocation -> getSource",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> object_creation_expression -> argument_list -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> CommonTokenStream",
        "program -> local_variable_declaration -> variable_declarator -> tokens",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> CommonTokenStream",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> lexer",
        "program -> local_variable_declaration -> HplsqlParser",
        "program -> local_variable_declaration -> variable_declarator -> parser",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> HplsqlParser",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> tokens",
        "program -> local_variable_declaration -> ProcVisitor",
        "program -> local_variable_declaration -> variable_declarator -> visitor",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> ProcVisitor",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> expression_statement -> method_invocation -> method_invocation -> parser",
        "program -> expression_statement -> method_invocation -> method_invocation -> program",
        "program -> expression_statement -> method_invocation -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> accept",
        "program -> expression_statement -> method_invocation -> argument_list -> visitor",
        "program -> return_statement -> ternary_expression -> binary_expression -> field_access -> visitor.func",
        "program -> return_statement -> ternary_expression -> binary_expression -> field_access -> visitor.func",
        "program -> return_statement -> ternary_expression -> binary_expression -> null",
        "program -> return_statement -> ternary_expression -> field_access -> visitor.func",
        "program -> return_statement -> ternary_expression -> field_access -> visitor.func",
        "program -> return_statement -> ternary_expression -> field_access -> visitor.proc",
        "program -> return_statement -> ternary_expression -> field_access -> visitor.proc"
    ],
    "pComparisonKeyset": [
        "program -> return_statement -> method_invocation -> pComparisons",
        "program -> return_statement -> method_invocation -> keySet",
        "program -> return_statement -> method_invocation -> argument_list"
    ],
    "preCreateTable": [
        "program -> local_variable_declaration -> scoped_type_identifier -> scoped_type_identifier -> scoped_type_identifier -> scoped_type_identifier -> scoped_type_identifier -> scoped_type_identifier -> org",
        "program -> local_variable_declaration -> scoped_type_identifier -> scoped_type_identifier -> scoped_type_identifier -> scoped_type_identifier -> scoped_type_identifier -> scoped_type_identifier -> apache",
        "program -> local_variable_declaration -> scoped_type_identifier -> scoped_type_identifier -> scoped_type_identifier -> scoped_type_identifier -> scoped_type_identifier -> hadoop",
        "program -> local_variable_declaration -> scoped_type_identifier -> scoped_type_identifier -> scoped_type_identifier -> scoped_type_identifier -> hive",
        "program -> local_variable_declaration -> scoped_type_identifier -> scoped_type_identifier -> scoped_type_identifier -> metastore",
        "program -> local_variable_declaration -> scoped_type_identifier -> scoped_type_identifier -> api",
        "program -> local_variable_declaration -> scoped_type_identifier -> Table",
        "program -> local_variable_declaration -> variable_declarator -> hmsTable",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> request",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getTable",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> hmsTable",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> isTemporary",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> argument_list",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> UnsupportedOperationException",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> \"Creation of temporary iceberg tables is not supported.\"",
        "program -> expression_statement -> assignment_expression -> field_access -> this.catalogProperties",
        "program -> expression_statement -> assignment_expression -> field_access -> this.catalogProperties",
        "program -> expression_statement -> assignment_expression -> method_invocation -> getCatalogProperties",
        "program -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> hmsTable",
        "program -> expression_statement -> method_invocation -> method_invocation -> hmsTable",
        "program -> expression_statement -> method_invocation -> method_invocation -> getParameters",
        "program -> expression_statement -> method_invocation -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> put",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> BaseMetastoreTableOperations.TABLE_TYPE_PROP",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> BaseMetastoreTableOperations.TABLE_TYPE_PROP",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> field_access -> BaseMetastoreTableOperations.ICEBERG_TABLE_TYPE_VALUE",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> field_access -> BaseMetastoreTableOperations.ICEBERG_TABLE_TYPE_VALUE",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> toUpperCase",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> Catalogs",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> hiveCatalog",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> argument_list -> conf",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> argument_list -> catalogProperties",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> Boolean",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> parseBoolean",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> method_invocation -> field_access -> this.catalogProperties",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> method_invocation -> field_access -> this.catalogProperties",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> method_invocation -> getProperty",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> hive_metastoreConstants.TABLE_IS_CTLT",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> hive_metastoreConstants.TABLE_IS_CTLT",
        "program -> if_statement -> block -> if_statement -> block -> throw_statement -> object_creation_expression -> UnsupportedOperationException",
        "program -> if_statement -> block -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> \"CTLT target table must be a HiveCatalog table.\"",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> hmsTable",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> getSd",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> setInputFormat",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> class_literal -> HiveIcebergInputFormat",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getCanonicalName",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> hmsTable",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> getSd",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> setOutputFormat",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> class_literal -> HiveIcebergOutputFormat",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getCanonicalName",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> field_access -> this.icebergTable",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> field_access -> this.icebergTable",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> IcebergTableUtil",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> getTable",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> conf",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> catalogProperties",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> true",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> Preconditions",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> checkArgument",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> catalogProperties",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> getProperty",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> argument_list -> field_access -> InputFormatConfig.TABLE_SCHEMA",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> argument_list -> field_access -> InputFormatConfig.TABLE_SCHEMA",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> null",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> \"Iceberg table already created - can not use provided schema\"",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> Preconditions",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> checkArgument",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> catalogProperties",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> getProperty",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> argument_list -> field_access -> InputFormatConfig.PARTITION_SPEC",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> method_invocation -> argument_list -> field_access -> InputFormatConfig.PARTITION_SPEC",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> null",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> \"Iceberg table already created - can not use provided partition specification\"",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> LOG",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> info",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> \"Iceberg table already exists {}\"",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> icebergTable",
        "program -> if_statement -> block -> try_statement -> block -> return_statement",
        "program -> if_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> NoSuchTableException",
        "program -> if_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> nte",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block",
        "program -> local_variable_declaration -> generic_type -> Set",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> String",
        "program -> local_variable_declaration -> variable_declarator -> identifierFields",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> method_invocation -> Optional",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> method_invocation -> ofNullable",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> method_invocation -> argument_list -> method_invocation -> request",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> method_invocation -> argument_list -> method_invocation -> getPrimaryKeys",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> map",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list -> lambda_expression -> primaryKeys",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list -> lambda_expression -> method_invocation -> method_invocation -> method_invocation -> primaryKeys",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list -> lambda_expression -> method_invocation -> method_invocation -> method_invocation -> stream",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list -> lambda_expression -> method_invocation -> method_invocation -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list -> lambda_expression -> method_invocation -> method_invocation -> map",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list -> lambda_expression -> method_invocation -> method_invocation -> argument_list -> method_reference -> SQLPrimaryKey",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list -> lambda_expression -> method_invocation -> method_invocation -> argument_list -> method_reference -> getColumn_name",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list -> lambda_expression -> method_invocation -> collect",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list -> lambda_expression -> method_invocation -> argument_list -> method_invocation -> Collectors",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list -> lambda_expression -> method_invocation -> argument_list -> method_invocation -> toSet",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list -> lambda_expression -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> orElse",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> method_invocation -> Collections",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> method_invocation -> emptySet",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> Schema",
        "program -> local_variable_declaration -> variable_declarator -> schema",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> schema",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> catalogProperties",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> hmsTable",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> identifierFields",
        "program -> local_variable_declaration -> PartitionSpec",
        "program -> local_variable_declaration -> variable_declarator -> spec",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> spec",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> conf",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> schema",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> hmsTable",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> hmsTable",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> isSetPartitionKeys",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> argument_list",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> method_invocation -> hmsTable",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> method_invocation -> getSd",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> getCols",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> addAll",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> hmsTable",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getPartitionKeys",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> hmsTable",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> setPartitionKeysIsSet",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> false",
        "program -> expression_statement -> method_invocation -> catalogProperties",
        "program -> expression_statement -> method_invocation -> put",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> InputFormatConfig.TABLE_SCHEMA",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> InputFormatConfig.TABLE_SCHEMA",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> SchemaParser",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> toJson",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> schema",
        "program -> expression_statement -> method_invocation -> catalogProperties",
        "program -> expression_statement -> method_invocation -> put",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> InputFormatConfig.PARTITION_SPEC",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> InputFormatConfig.PARTITION_SPEC",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> PartitionSpecParser",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> toJson",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> spec",
        "program -> expression_statement -> method_invocation -> setCommonHmsTablePropertiesForIceberg",
        "program -> expression_statement -> method_invocation -> argument_list -> hmsTable",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> method_invocation -> hmsTable",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> method_invocation -> getParameters",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> containsKey",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> field_access -> BaseMetastoreTableOperations.METADATA_LOCATION_PROP",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> argument_list -> field_access -> BaseMetastoreTableOperations.METADATA_LOCATION_PROP",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> createHMSTableInHook",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> true",
        "program -> expression_statement -> method_invocation -> assertFileFormat",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> catalogProperties",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getProperty",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> TableProperties.DEFAULT_FILE_FORMAT",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> TableProperties.DEFAULT_FILE_FORMAT",
        "program -> expression_statement -> method_invocation -> setOrcOnlyFilesParam",
        "program -> expression_statement -> method_invocation -> argument_list -> hmsTable",
        "program -> expression_statement -> method_invocation -> request",
        "program -> expression_statement -> method_invocation -> setPrimaryKeys",
        "program -> expression_statement -> method_invocation -> argument_list -> null"
    ],
    "preDropTable": [
        "program -> expression_statement -> assignment_expression -> field_access -> this.catalogProperties",
        "program -> expression_statement -> assignment_expression -> field_access -> this.catalogProperties",
        "program -> expression_statement -> assignment_expression -> method_invocation -> getCatalogProperties",
        "program -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> hmsTable",
        "program -> expression_statement -> assignment_expression -> field_access -> this.deleteIcebergTable",
        "program -> expression_statement -> assignment_expression -> field_access -> this.deleteIcebergTable",
        "program -> expression_statement -> assignment_expression -> binary_expression -> binary_expression -> method_invocation -> hmsTable",
        "program -> expression_statement -> assignment_expression -> binary_expression -> binary_expression -> method_invocation -> getParameters",
        "program -> expression_statement -> assignment_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> expression_statement -> assignment_expression -> binary_expression -> binary_expression -> null",
        "program -> expression_statement -> assignment_expression -> binary_expression -> method_invocation -> \"TRUE\"",
        "program -> expression_statement -> assignment_expression -> binary_expression -> method_invocation -> equalsIgnoreCase",
        "program -> expression_statement -> assignment_expression -> binary_expression -> method_invocation -> argument_list -> method_invocation -> method_invocation -> hmsTable",
        "program -> expression_statement -> assignment_expression -> binary_expression -> method_invocation -> argument_list -> method_invocation -> method_invocation -> getParameters",
        "program -> expression_statement -> assignment_expression -> binary_expression -> method_invocation -> argument_list -> method_invocation -> method_invocation -> argument_list",
        "program -> expression_statement -> assignment_expression -> binary_expression -> method_invocation -> argument_list -> method_invocation -> get",
        "program -> expression_statement -> assignment_expression -> binary_expression -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> InputFormatConfig.EXTERNAL_TABLE_PURGE",
        "program -> expression_statement -> assignment_expression -> binary_expression -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> InputFormatConfig.EXTERNAL_TABLE_PURGE",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> deleteIcebergTable",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> Catalogs",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> hiveCatalog",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list -> conf",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list -> catalogProperties",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> deleteData",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> String",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> variable_declarator -> metadataLocation",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> hmsTable",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> getParameters",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> get",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> BaseMetastoreTableOperations.METADATA_LOCATION_PROP",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> BaseMetastoreTableOperations.METADATA_LOCATION_PROP",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> field_access -> this.deleteIo",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> field_access -> this.deleteIo",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> method_invocation -> Catalogs",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> method_invocation -> loadTable",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> method_invocation -> argument_list -> conf",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> method_invocation -> argument_list -> catalogProperties",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> io",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> field_access -> this.deleteMetadata",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> field_access -> this.deleteMetadata",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> TableMetadataParser",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> read",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> deleteIo",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> metadataLocation",
        "program -> if_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> Exception",
        "program -> if_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> LOG",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> error",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> binary_expression -> \"preDropTable: Error during loading Iceberg table or parsing its metadata for HMS table: {}.{}. \"",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> binary_expression -> \"In some cases, this might lead to undeleted metadata files under the table directory: {}. \"",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> binary_expression -> \"Please double check and, if needed, manually delete any dangling files/folders, if any. \"",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> \"In spite of this error, the HMS table drop operation should proceed as normal.\"",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> hmsTable",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getDbName",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> hmsTable",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getTableName",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> hmsTable",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> getSd",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getLocation",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> e"
    ],
    "printMutation": [
        "program -> if_statement -> parenthesized_expression -> method_invocation -> LOG",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> isTraceEnabled",
        "program -> if_statement -> parenthesized_expression -> method_invocation -> argument_list",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> LOG",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> trace",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> \"Table {} row key: {}\"",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> table",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> this",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> hexDump",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> m",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> getRow",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> local_variable_declaration -> Iterator",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> itr",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> m",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> getUpdates",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> iterator",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> if_statement -> block -> while_statement -> parenthesized_expression -> method_invocation -> itr",
        "program -> if_statement -> block -> while_statement -> parenthesized_expression -> method_invocation -> hasNext",
        "program -> if_statement -> block -> while_statement -> parenthesized_expression -> method_invocation -> argument_list",
        "program -> if_statement -> block -> while_statement -> block -> local_variable_declaration -> ColumnUpdate",
        "program -> if_statement -> block -> while_statement -> block -> local_variable_declaration -> variable_declarator -> cu",
        "program -> if_statement -> block -> while_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> ColumnUpdate",
        "program -> if_statement -> block -> while_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> method_invocation -> itr",
        "program -> if_statement -> block -> while_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> method_invocation -> next",
        "program -> if_statement -> block -> while_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> method_invocation -> argument_list",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> LOG",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> trace",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> \"Table {} column: {}:{}\"",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> table",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> this",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> hexDump",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> cu",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> getColumnFamily",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> this",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> hexDump",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> cu",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> getColumnQualifier",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> LOG",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> trace",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> \"Table {} security: {}\"",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> table",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> object_creation_expression -> ColumnVisibility",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> object_creation_expression -> argument_list -> method_invocation -> cu",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> object_creation_expression -> argument_list -> method_invocation -> getColumnVisibility",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> object_creation_expression -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> toString",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> LOG",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> trace",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> \"Table {} value: {}\"",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> table",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> this",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> hexDump",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> cu",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> getValue",
        "program -> if_statement -> block -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> return_statement -> method_invocation -> method_invocation -> m",
        "program -> return_statement -> method_invocation -> method_invocation -> getUpdates",
        "program -> return_statement -> method_invocation -> method_invocation -> argument_list",
        "program -> return_statement -> method_invocation -> size",
        "program -> return_statement -> method_invocation -> argument_list"
    ],
    "processAndOpNode": [
        "program -> local_variable_declaration -> generic_type -> List",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> Range",
        "program -> local_variable_declaration -> variable_declarator -> andRanges",
        "program -> local_variable_declaration -> variable_declarator -> null",
        "program -> enhanced_for_statement -> Object",
        "program -> enhanced_for_statement -> nodeOutput",
        "program -> enhanced_for_statement -> nodeOutputs",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> nodeOutput",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> continue_statement",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> andRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> andRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> generic_type -> ArrayList",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> generic_type -> type_arguments -> Range",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> instanceof_expression -> nodeOutput",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> instanceof_expression -> Range",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> Range",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> childRange",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> Range",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> nodeOutput",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> andRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> isEmpty",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> andRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> add",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> childRange",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> generic_type -> List",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> generic_type -> type_arguments -> Range",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> newRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> ArrayList",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> type_arguments -> Range",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> Range",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> andRange",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> andRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> Range",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> intersectedRange",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> andRange",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> clip",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> childRange",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> true",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> intersectedRange",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> newRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> add",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> intersectedRange",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> andRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> newRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> parenthesized_expression -> instanceof_expression -> nodeOutput",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> parenthesized_expression -> instanceof_expression -> List",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> local_variable_declaration -> modifiers -> annotation -> SuppressWarnings",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> local_variable_declaration -> modifiers -> annotation -> annotation_argument_list -> \"unchecked\"",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> local_variable_declaration -> generic_type -> List",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> local_variable_declaration -> generic_type -> type_arguments -> Range",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> childRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> generic_type -> List",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> generic_type -> type_arguments -> Range",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> nodeOutput",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> andRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> isEmpty",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> parenthesized_expression -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> andRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> addAll",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> childRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> generic_type -> List",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> generic_type -> type_arguments -> Range",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> newRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> ArrayList",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> type_arguments -> Range",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> Range",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> andRange",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> andRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> enhanced_for_statement -> Range",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> enhanced_for_statement -> childRange",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> enhanced_for_statement -> childRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> Range",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> intersectedRange",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> andRange",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> clip",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> childRange",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> true",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> intersectedRange",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> newRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> add",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> intersectedRange",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> andRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> newRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> LOG",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> error",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> \"Expected Range from {} but got {}\"",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> nd",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> nodeOutput",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> IllegalArgumentException",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"Expected Range but got \"",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> method_invocation -> nodeOutput",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> method_invocation -> getClass",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> getName",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> argument_list",
        "program -> return_statement -> andRanges"
    ],
    "processExpression": [
        "program -> local_variable_declaration -> GenericUDF",
        "program -> local_variable_declaration -> variable_declarator -> genericUdf",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> func",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getGenericUDF",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> ExprNodeConstantDesc",
        "program -> local_variable_declaration -> variable_declarator -> constantDesc",
        "program -> local_variable_declaration -> variable_declarator -> null",
        "program -> local_variable_declaration -> ExprNodeColumnDesc",
        "program -> local_variable_declaration -> variable_declarator -> columnDesc",
        "program -> local_variable_declaration -> variable_declarator -> null",
        "program -> local_variable_declaration -> ExprNodeDesc",
        "program -> local_variable_declaration -> variable_declarator -> leftHandNode",
        "program -> local_variable_declaration -> variable_declarator -> null",
        "program -> enhanced_for_statement -> Object",
        "program -> enhanced_for_statement -> nodeOutput",
        "program -> enhanced_for_statement -> nodeOutputs",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> instanceof_expression -> nodeOutput",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> instanceof_expression -> ExprNodeConstantDesc",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> leftHandNode",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> leftHandNode",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> cast_expression -> ExprNodeDesc",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> cast_expression -> nodeOutput",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> constantDesc",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> cast_expression -> ExprNodeConstantDesc",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> cast_expression -> nodeOutput",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> parenthesized_expression -> instanceof_expression -> nodeOutput",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> parenthesized_expression -> instanceof_expression -> ExprNodeColumnDesc",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> leftHandNode",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> leftHandNode",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> cast_expression -> ExprNodeDesc",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> cast_expression -> nodeOutput",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> assignment_expression -> columnDesc",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> assignment_expression -> cast_expression -> ExprNodeColumnDesc",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> assignment_expression -> cast_expression -> nodeOutput",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> null",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> constantDesc",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> null",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> columnDesc",
        "program -> if_statement -> block -> return_statement -> null",
        "program -> local_variable_declaration -> ConstantObjectInspector",
        "program -> local_variable_declaration -> variable_declarator -> objInspector",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> constantDesc",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getWritableObjectInspector",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> field_access -> this.hiveRowIdColumnName",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> field_access -> this.hiveRowIdColumnName",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> equals",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> argument_list -> method_invocation -> columnDesc",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> argument_list -> method_invocation -> getColumn",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> field_access -> this.indexScanner",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> field_access -> this.indexScanner",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> null",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> field_access -> this.indexScanner",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> field_access -> this.indexScanner",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> isIndexed",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> method_invocation -> columnDesc",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> method_invocation -> getColumn",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> method_invocation -> getIndexedRowIds",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> genericUdf",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> leftHandNode",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> method_invocation -> columnDesc",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> method_invocation -> getColumn",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> objInspector",
        "program -> if_statement -> block -> return_statement -> null",
        "program -> local_variable_declaration -> Text",
        "program -> local_variable_declaration -> variable_declarator -> constText",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getConstantText",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> objInspector",
        "program -> return_statement -> method_invocation -> getRange",
        "program -> return_statement -> method_invocation -> argument_list -> genericUdf",
        "program -> return_statement -> method_invocation -> argument_list -> leftHandNode",
        "program -> return_statement -> method_invocation -> argument_list -> constText"
    ],
    "processOrOpNode": [
        "program -> local_variable_declaration -> generic_type -> List",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> Range",
        "program -> local_variable_declaration -> variable_declarator -> orRanges",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> ArrayList",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> generic_type -> type_arguments -> Range",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> field_access -> nodeOutputs.length",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> field_access -> nodeOutputs.length",
        "program -> enhanced_for_statement -> Object",
        "program -> enhanced_for_statement -> nodeOutput",
        "program -> enhanced_for_statement -> nodeOutputs",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> instanceof_expression -> nodeOutput",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> instanceof_expression -> Range",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> orRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> add",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> cast_expression -> Range",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> cast_expression -> nodeOutput",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> parenthesized_expression -> instanceof_expression -> nodeOutput",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> parenthesized_expression -> instanceof_expression -> List",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> local_variable_declaration -> modifiers -> annotation -> SuppressWarnings",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> local_variable_declaration -> modifiers -> annotation -> annotation_argument_list -> \"unchecked\"",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> local_variable_declaration -> generic_type -> List",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> local_variable_declaration -> generic_type -> type_arguments -> Range",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> childRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> generic_type -> List",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> generic_type -> type_arguments -> Range",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cast_expression -> nodeOutput",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> orRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> addAll",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> childRanges",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> LOG",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> error",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> \"Expected Range from {} but got {}\"",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> nd",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> nodeOutput",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> IllegalArgumentException",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"Expected Range but got \"",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> method_invocation -> nodeOutput",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> method_invocation -> getClass",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> getName",
        "program -> enhanced_for_statement -> block -> if_statement -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> orRanges",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> size",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> 1",
        "program -> if_statement -> block -> return_statement -> method_invocation -> Range",
        "program -> if_statement -> block -> return_statement -> method_invocation -> mergeOverlapping",
        "program -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> orRanges",
        "program -> if_statement -> if_statement -> parenthesized_expression -> binary_expression -> 1",
        "program -> if_statement -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> orRanges",
        "program -> if_statement -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> size",
        "program -> if_statement -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> if_statement -> block -> return_statement -> method_invocation -> orRanges",
        "program -> if_statement -> if_statement -> block -> return_statement -> method_invocation -> get",
        "program -> if_statement -> if_statement -> block -> return_statement -> method_invocation -> argument_list -> 0",
        "program -> if_statement -> if_statement -> block -> return_statement -> orRanges"
    ],
    "pushToValue": [
        "program -> local_variable_declaration -> generic_type -> Iterator",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> Key",
        "program -> local_variable_declaration -> variable_declarator -> kIter",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> keys",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> iterator",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> generic_type -> Iterator",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> Value",
        "program -> local_variable_declaration -> variable_declarator -> vIter",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> values",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> iterator",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> while_statement -> parenthesized_expression -> method_invocation -> kIter",
        "program -> while_statement -> parenthesized_expression -> method_invocation -> hasNext",
        "program -> while_statement -> parenthesized_expression -> method_invocation -> argument_list",
        "program -> while_statement -> block -> local_variable_declaration -> Key",
        "program -> while_statement -> block -> local_variable_declaration -> variable_declarator -> k",
        "program -> while_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> kIter",
        "program -> while_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> next",
        "program -> while_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> while_statement -> block -> local_variable_declaration -> Value",
        "program -> while_statement -> block -> local_variable_declaration -> variable_declarator -> v",
        "program -> while_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> vIter",
        "program -> while_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> next",
        "program -> while_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> while_statement -> block -> expression_statement -> method_invocation -> row",
        "program -> while_statement -> block -> expression_statement -> method_invocation -> add",
        "program -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> k",
        "program -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> getColumnFamily",
        "program -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> argument_list",
        "program -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> toString",
        "program -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> k",
        "program -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> getColumnQualifier",
        "program -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> argument_list",
        "program -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> toString",
        "program -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> v",
        "program -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> get",
        "program -> while_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list"
    ],
    "readFields": [
        "program -> local_variable_declaration -> array_type -> integral_type",
        "program -> local_variable_declaration -> array_type -> dimensions",
        "program -> local_variable_declaration -> variable_declarator -> data",
        "program -> local_variable_declaration -> variable_declarator -> array_creation_expression -> integral_type",
        "program -> local_variable_declaration -> variable_declarator -> array_creation_expression -> dimensions_expr -> method_invocation -> in",
        "program -> local_variable_declaration -> variable_declarator -> array_creation_expression -> dimensions_expr -> method_invocation -> readInt",
        "program -> local_variable_declaration -> variable_declarator -> array_creation_expression -> dimensions_expr -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> in",
        "program -> expression_statement -> method_invocation -> readFully",
        "program -> expression_statement -> method_invocation -> argument_list -> data",
        "program -> expression_statement -> assignment_expression -> field_access -> this.task",
        "program -> expression_statement -> assignment_expression -> field_access -> this.task",
        "program -> expression_statement -> assignment_expression -> method_invocation -> SerializationUtil",
        "program -> expression_statement -> assignment_expression -> method_invocation -> deserializeFromBytes",
        "program -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> data"
    ],
    "rollbackCreateTable": [
        ""
    ],
    "rollbackDropTable": [
        ""
    ],
    "serializeColumnMapping": [
        "program -> local_variable_declaration -> MapObjectInspector",
        "program -> local_variable_declaration -> variable_declarator -> mapObjectInspector",
        "program -> local_variable_declaration -> variable_declarator -> cast_expression -> MapObjectInspector",
        "program -> local_variable_declaration -> variable_declarator -> cast_expression -> fieldObjectInspector",
        "program -> local_variable_declaration -> generic_type -> Map",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> wildcard",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> wildcard",
        "program -> local_variable_declaration -> variable_declarator -> map",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> mapObjectInspector",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getMap",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> value",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> map",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> block -> return_statement",
        "program -> local_variable_declaration -> ObjectInspector",
        "program -> local_variable_declaration -> variable_declarator -> keyObjectInspector",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> mapObjectInspector",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getMapKeyObjectInspector",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> variable_declarator -> valueObjectInspector",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> mapObjectInspector",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getMapValueObjectInspector",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> array_type -> integral_type",
        "program -> local_variable_declaration -> array_type -> dimensions",
        "program -> local_variable_declaration -> variable_declarator -> cfBytes",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> columnMapping",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> getColumnFamily",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getBytes",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> Charsets.UTF_8",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> Charsets.UTF_8",
        "program -> local_variable_declaration -> variable_declarator -> cqPrefixBytes",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> columnMapping",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> getColumnQualifierPrefix",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getBytes",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> Charsets.UTF_8",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> Charsets.UTF_8",
        "program -> local_variable_declaration -> array_type -> integral_type",
        "program -> local_variable_declaration -> array_type -> dimensions",
        "program -> local_variable_declaration -> variable_declarator -> cqBytes",
        "program -> local_variable_declaration -> variable_declarator -> valueBytes",
        "program -> enhanced_for_statement -> generic_type -> Entry",
        "program -> enhanced_for_statement -> generic_type -> type_arguments -> wildcard",
        "program -> enhanced_for_statement -> generic_type -> type_arguments -> wildcard",
        "program -> enhanced_for_statement -> entry",
        "program -> enhanced_for_statement -> method_invocation -> map",
        "program -> enhanced_for_statement -> method_invocation -> entrySet",
        "program -> enhanced_for_statement -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> output",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> reset",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> 0",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> field_access -> cqPrefixBytes.length",
        "program -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> field_access -> cqPrefixBytes.length",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> output",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> write",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> cqPrefixBytes",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> 0",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> cqPrefixBytes.length",
        "program -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> cqPrefixBytes.length",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> writeWithLevel",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> keyObjectInspector",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> entry",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getKey",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> output",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> columnMapping",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> 3",
        "program -> enhanced_for_statement -> block -> expression_statement -> assignment_expression -> cqBytes",
        "program -> enhanced_for_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> output",
        "program -> enhanced_for_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> toByteArray",
        "program -> enhanced_for_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> output",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> reset",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> writeWithLevel",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> valueObjectInspector",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> entry",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getValue",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> output",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> columnMapping",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> 3",
        "program -> enhanced_for_statement -> block -> expression_statement -> assignment_expression -> valueBytes",
        "program -> enhanced_for_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> output",
        "program -> enhanced_for_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> toByteArray",
        "program -> enhanced_for_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> mutation",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> put",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> cfBytes",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> cqBytes",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> visibility",
        "program -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> valueBytes"
    ],
    "serializeRowId": [
        "program -> local_variable_declaration -> ObjectInspector",
        "program -> local_variable_declaration -> variable_declarator -> inspector",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> field",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getFieldObjectInspector",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> inspector",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> getCategory",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> field_access -> field_access -> ObjectInspector.Category.STRUCT",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> field_access -> field_access -> ObjectInspector.Category.STRUCT",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> field_access -> ObjectInspector.Category.STRUCT",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> IllegalStateException",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"invalid type value \"",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> inspector",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> getTypeName",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> output",
        "program -> expression_statement -> method_invocation -> reset",
        "program -> expression_statement -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> StructObjectInspector",
        "program -> local_variable_declaration -> variable_declarator -> structOI",
        "program -> local_variable_declaration -> variable_declarator -> cast_expression -> StructObjectInspector",
        "program -> local_variable_declaration -> variable_declarator -> cast_expression -> inspector",
        "program -> local_variable_declaration -> generic_type -> List",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> Object",
        "program -> local_variable_declaration -> variable_declarator -> elements",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> structOI",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getStructFieldsDataAsList",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> object",
        "program -> local_variable_declaration -> generic_type -> List",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> wildcard -> StructField",
        "program -> local_variable_declaration -> variable_declarator -> fields",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> structOI",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getAllStructFieldRefs",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> for_statement -> local_variable_declaration -> integral_type",
        "program -> for_statement -> local_variable_declaration -> variable_declarator -> i",
        "program -> for_statement -> local_variable_declaration -> variable_declarator -> 0",
        "program -> for_statement -> binary_expression -> i",
        "program -> for_statement -> binary_expression -> method_invocation -> elements",
        "program -> for_statement -> binary_expression -> method_invocation -> size",
        "program -> for_statement -> binary_expression -> method_invocation -> argument_list",
        "program -> for_statement -> update_expression -> i",
        "program -> for_statement -> block -> local_variable_declaration -> Object",
        "program -> for_statement -> block -> local_variable_declaration -> variable_declarator -> o",
        "program -> for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> elements",
        "program -> for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> get",
        "program -> for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> i",
        "program -> for_statement -> block -> local_variable_declaration -> StructField",
        "program -> for_statement -> block -> local_variable_declaration -> variable_declarator -> structField",
        "program -> for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> fields",
        "program -> for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> get",
        "program -> for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> i",
        "program -> for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> output",
        "program -> for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> getLength",
        "program -> for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> 0",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> output",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> write",
        "program -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> separator",
        "program -> for_statement -> block -> expression_statement -> method_invocation -> serializer",
        "program -> for_statement -> block -> expression_statement -> method_invocation -> writeWithLevel",
        "program -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> structField",
        "program -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getFieldObjectInspector",
        "program -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> o",
        "program -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> output",
        "program -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> rowIdMapping",
        "program -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> 1",
        "program -> return_statement -> method_invocation -> output",
        "program -> return_statement -> method_invocation -> toByteArray",
        "program -> return_statement -> method_invocation -> argument_list"
    ],
    "serialize": [
        "program -> return_statement -> method_invocation -> storageFormatTest",
        "program -> return_statement -> method_invocation -> serialize",
        "program -> return_statement -> method_invocation -> argument_list -> array_access -> rows",
        "program -> return_statement -> method_invocation -> argument_list -> array_access -> 0",
        "program -> return_statement -> method_invocation -> argument_list -> oi"
    ],
    "setAccumuloIndexColumns": [
        "program -> expression_statement -> method_invocation -> AccumuloIndexedOutputFormat",
        "program -> expression_statement -> method_invocation -> setIndexColumns",
        "program -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> expression_statement -> method_invocation -> argument_list -> indexColumns"
    ],
    "setAccumuloIndexTableName": [
        "program -> expression_statement -> method_invocation -> AccumuloIndexedOutputFormat",
        "program -> expression_statement -> method_invocation -> setIndexTableName",
        "program -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> expression_statement -> method_invocation -> argument_list -> indexTableName"
    ],
    "setAccumuloStringEncoding": [
        "program -> expression_statement -> method_invocation -> AccumuloIndexedOutputFormat",
        "program -> expression_statement -> method_invocation -> setStringEncoding",
        "program -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> expression_statement -> method_invocation -> argument_list -> isStringEncoded"
    ],
    "setColumnTuples": [
        "program -> if_statement -> parenthesized_expression -> binary_expression -> columns",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> block -> local_variable_declaration -> String",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> cols",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> columns",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> trim",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> cols",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> isEmpty",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> \"*\"",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> equals",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> unary_expression -> method_invocation -> argument_list -> cols",
        "program -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> String",
        "program -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> col",
        "program -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> method_invocation -> cols",
        "program -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> method_invocation -> split",
        "program -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> method_invocation -> argument_list -> \",\"",
        "program -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> array_type -> String",
        "program -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> array_type -> dimensions",
        "program -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> cfcqtp",
        "program -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> col",
        "program -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> trim",
        "program -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> split",
        "program -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> \":\"",
        "program -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> addIndexCol",
        "program -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> array_access -> cfcqtp",
        "program -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> array_access -> 0",
        "program -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> array_access -> cfcqtp",
        "program -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> array_access -> 1",
        "program -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> array_access -> cfcqtp",
        "program -> if_statement -> block -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> array_access -> 2"
    ],
    "setConf": [
        "program -> expression_statement -> assignment_expression -> hiveConf",
        "program -> expression_statement -> assignment_expression -> object_creation_expression -> HiveConf",
        "program -> expression_statement -> assignment_expression -> object_creation_expression -> argument_list",
        "program -> expression_statement -> method_invocation -> MetastoreConf",
        "program -> expression_statement -> method_invocation -> setBoolVar",
        "program -> expression_statement -> method_invocation -> argument_list -> hiveConf",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> field_access -> MetastoreConf.ConfVars.HIVE_IN_TEST",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> field_access -> MetastoreConf.ConfVars.HIVE_IN_TEST",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> MetastoreConf.ConfVars.HIVE_IN_TEST",
        "program -> expression_statement -> method_invocation -> argument_list -> true",
        "program -> expression_statement -> method_invocation -> MetastoreConf",
        "program -> expression_statement -> method_invocation -> setVar",
        "program -> expression_statement -> method_invocation -> argument_list -> hiveConf",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> field_access -> MetastoreConf.ConfVars.WAREHOUSE",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> field_access -> MetastoreConf.ConfVars.WAREHOUSE",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> MetastoreConf.ConfVars.WAREHOUSE",
        "program -> expression_statement -> method_invocation -> argument_list -> \"/tmp\"",
        "program -> expression_statement -> method_invocation -> MetastoreConf",
        "program -> expression_statement -> method_invocation -> setTimeVar",
        "program -> expression_statement -> method_invocation -> argument_list -> hiveConf",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> field_access -> MetastoreConf.ConfVars.TXN_TIMEOUT",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> field_access -> MetastoreConf.ConfVars.TXN_TIMEOUT",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> MetastoreConf.ConfVars.TXN_TIMEOUT",
        "program -> expression_statement -> method_invocation -> argument_list -> 1",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> TimeUnit.SECONDS",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> TimeUnit.SECONDS",
        "program -> expression_statement -> method_invocation -> HiveConf",
        "program -> expression_statement -> method_invocation -> setVar",
        "program -> expression_statement -> method_invocation -> argument_list -> hiveConf",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> field_access -> HiveConf.ConfVars.HIVE_AUTHORIZATION_MANAGER",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> field_access -> HiveConf.ConfVars.HIVE_AUTHORIZATION_MANAGER",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> HiveConf.ConfVars.HIVE_AUTHORIZATION_MANAGER",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> class_literal -> SQLStdHiveAuthorizerFactory",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getName",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> MetastoreConf",
        "program -> expression_statement -> method_invocation -> setVar",
        "program -> expression_statement -> method_invocation -> argument_list -> hiveConf",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> field_access -> MetastoreConf.ConfVars.TRANSACTIONAL_EVENT_LISTENERS",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> field_access -> MetastoreConf.ConfVars.TRANSACTIONAL_EVENT_LISTENERS",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> MetastoreConf.ConfVars.TRANSACTIONAL_EVENT_LISTENERS",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> class_literal -> DbNotificationListener",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getName",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> MetastoreConf",
        "program -> expression_statement -> method_invocation -> setTimeVar",
        "program -> expression_statement -> method_invocation -> argument_list -> hiveConf",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> field_access -> MetastoreConf.ConfVars.EVENT_DB_LISTENER_CLEAN_INTERVAL",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> field_access -> MetastoreConf.ConfVars.EVENT_DB_LISTENER_CLEAN_INTERVAL",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> MetastoreConf.ConfVars.EVENT_DB_LISTENER_CLEAN_INTERVAL",
        "program -> expression_statement -> method_invocation -> argument_list -> 10",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> TimeUnit.MILLISECONDS",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> TimeUnit.MILLISECONDS",
        "program -> expression_statement -> method_invocation -> MetastoreConf",
        "program -> expression_statement -> method_invocation -> setTimeVar",
        "program -> expression_statement -> method_invocation -> argument_list -> hiveConf",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> field_access -> MetastoreConf.ConfVars.EVENT_DB_LISTENER_CLEAN_STARTUP_WAIT_INTERVAL",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> field_access -> MetastoreConf.ConfVars.EVENT_DB_LISTENER_CLEAN_STARTUP_WAIT_INTERVAL",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> MetastoreConf.ConfVars.EVENT_DB_LISTENER_CLEAN_STARTUP_WAIT_INTERVAL",
        "program -> expression_statement -> method_invocation -> argument_list -> 0",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> TimeUnit.SECONDS",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> TimeUnit.SECONDS"
    ],
    "setConnectorInfoForInputAndOutput": [
        "program -> local_variable_declaration -> AuthenticationToken",
        "program -> local_variable_declaration -> variable_declarator -> token",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getDelegationToken",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> conn",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> InputConfigurator",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> setConnectorInfo",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> class_literal -> AccumuloInputFormat",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> params",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getAccumuloUserName",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> token",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> IllegalStateException",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> log",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> debug",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> \"Ignoring IllegalArgumentException about re-setting connector information\"",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> OutputConfigurator",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> setConnectorInfo",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> class_literal -> AccumuloOutputFormat",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> params",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getAccumuloUserName",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> token",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> IllegalStateException",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> log",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> debug",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> \"Ignoring IllegalArgumentException about re-setting connector information\"",
        "program -> return_statement -> method_invocation -> getHadoopToken",
        "program -> return_statement -> method_invocation -> argument_list -> token"
    ],
    "setConnectParams": [
        "program -> expression_statement -> assignment_expression -> field_access -> this.connectParams",
        "program -> expression_statement -> assignment_expression -> field_access -> this.connectParams",
        "program -> expression_statement -> assignment_expression -> connectParams"
    ],
    "setDefaultAccumuloTableName": [
        "program -> expression_statement -> method_invocation -> AccumuloIndexedOutputFormat",
        "program -> expression_statement -> method_invocation -> setDefaultTableName",
        "program -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> expression_statement -> method_invocation -> argument_list -> tableName"
    ],
    "setIndexColumns": [
        "program -> if_statement -> parenthesized_expression -> binary_expression -> tableName",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> conf",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> set",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> enumToConfKey",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> implementingClass",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> WriteOpts.INDEX_COLUMNS",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> WriteOpts.INDEX_COLUMNS",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> tableName"
    ],
    "setIndexScanner": [
        "program -> expression_statement -> assignment_expression -> field_access -> this.indexScanner",
        "program -> expression_statement -> assignment_expression -> field_access -> this.indexScanner",
        "program -> expression_statement -> assignment_expression -> indexScanner"
    ],
    "setIndexTableName": [
        "program -> if_statement -> parenthesized_expression -> binary_expression -> tableName",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> conf",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> set",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> enumToConfKey",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> implementingClass",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> WriteOpts.INDEX_TABLE_NAME",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> WriteOpts.INDEX_TABLE_NAME",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> tableName"
    ],
    "setInputTableName": [
        "program -> expression_statement -> method_invocation -> AccumuloInputFormat",
        "program -> expression_statement -> method_invocation -> setInputTableName",
        "program -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> expression_statement -> method_invocation -> argument_list -> tableName"
    ],
    "setOutputFormatMockInstance": [
        "program -> try_statement -> block -> expression_statement -> method_invocation -> AccumuloOutputFormat",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> setMockInstance",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> instanceName",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> IllegalStateException",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> log",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> debug",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> \"Ignoring exception setting mock instance of \"",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> instanceName",
        "program -> try_statement -> catch_clause -> block -> expression_statement -> method_invocation -> argument_list -> e"
    ],
    "setPrimitiveCompare": [
        "program -> expression_statement -> assignment_expression -> field_access -> this.comp",
        "program -> expression_statement -> assignment_expression -> field_access -> this.comp",
        "program -> expression_statement -> assignment_expression -> comp"
    ],
    "setRanges": [
        "program -> expression_statement -> method_invocation -> AccumuloInputFormat",
        "program -> expression_statement -> method_invocation -> setRanges",
        "program -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> expression_statement -> method_invocation -> argument_list -> ranges"
    ],
    "setRecordEncoding": [
        "program -> expression_statement -> method_invocation -> conf",
        "program -> expression_statement -> method_invocation -> set",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> enumToConfKey",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> implementingClass",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> WriteOpts.BINARY_ENCODING",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> field_access -> WriteOpts.BINARY_ENCODING",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> isBinary",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> toString",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list"
    ],
    "setRowId": [
        "program -> expression_statement -> assignment_expression -> field_access -> this.rowId",
        "program -> expression_statement -> assignment_expression -> field_access -> this.rowId",
        "program -> expression_statement -> assignment_expression -> rowId"
    ],
    "setScanAuthorizations": [
        "program -> expression_statement -> method_invocation -> AccumuloInputFormat",
        "program -> expression_statement -> method_invocation -> setScanAuthorizations",
        "program -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> expression_statement -> method_invocation -> argument_list -> auths"
    ],
    "setStringEncoding": [
        "program -> expression_statement -> method_invocation -> IndexOutputConfigurator",
        "program -> expression_statement -> method_invocation -> setRecordEncoding",
        "program -> expression_statement -> method_invocation -> argument_list -> CLASS",
        "program -> expression_statement -> method_invocation -> argument_list -> job",
        "program -> expression_statement -> method_invocation -> argument_list -> isStringEncoding"
    ],
    "size": [
        "program -> return_statement -> size"
    ],
    "stripCode": [
        "program -> expression_statement -> method_invocation -> Preconditions",
        "program -> expression_statement -> method_invocation -> checkNotNull",
        "program -> expression_statement -> method_invocation -> argument_list -> columnMapping",
        "program -> local_variable_declaration -> integral_type",
        "program -> local_variable_declaration -> variable_declarator -> offset",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> columnMapping",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> lastIndexOf",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.POUND",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> field_access -> AccumuloHiveConstants.POUND",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> unary_expression -> 1",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> offset",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> parenthesized_expression -> binary_expression -> binary_expression -> 0",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> parenthesized_expression -> binary_expression -> binary_expression -> offset",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> parenthesized_expression -> binary_expression -> binary_expression -> field_access -> AccumuloHiveConstants.ESCAPE",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> parenthesized_expression -> binary_expression -> binary_expression -> field_access -> AccumuloHiveConstants.ESCAPE",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> columnMapping",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> charAt",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list -> binary_expression -> offset",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> parenthesized_expression -> binary_expression -> binary_expression -> method_invocation -> argument_list -> binary_expression -> 1",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> IllegalArgumentException",
        "program -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> \"Provided column mapping does not define a column encoding\"",
        "program -> return_statement -> method_invocation -> columnMapping",
        "program -> return_statement -> method_invocation -> substring",
        "program -> return_statement -> method_invocation -> argument_list -> 0",
        "program -> return_statement -> method_invocation -> argument_list -> offset"
    ],
    "toLazyObject": [
        "program -> local_variable_declaration -> ObjectInspector",
        "program -> local_variable_declaration -> variable_declarator -> fieldOI",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> method_invocation -> oi",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> method_invocation -> getAllStructFieldRefs",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> get",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> method_invocation -> argument_list -> fieldID",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getFieldObjectInspector",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> generic_type -> LazyObject",
        "program -> local_variable_declaration -> generic_type -> type_arguments -> wildcard -> ObjectInspector",
        "program -> local_variable_declaration -> variable_declarator -> lazyObject",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> LazyFactory",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> createLazyObject",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> fieldOI",
        "program -> local_variable_declaration -> ByteArrayRef",
        "program -> local_variable_declaration -> variable_declarator -> ref",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> ByteArrayRef",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> expression_statement -> method_invocation -> ref",
        "program -> expression_statement -> method_invocation -> setData",
        "program -> expression_statement -> method_invocation -> argument_list -> bytes",
        "program -> expression_statement -> method_invocation -> lazyObject",
        "program -> expression_statement -> method_invocation -> init",
        "program -> expression_statement -> method_invocation -> argument_list -> ref",
        "program -> expression_statement -> method_invocation -> argument_list -> 0",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> method_invocation -> ref",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> method_invocation -> getData",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> ref.getData().length",
        "program -> return_statement -> lazyObject"
    ],
    "toSetting": [
        "program -> expression_statement -> update_expression -> iteratorCount",
        "program -> local_variable_declaration -> modifiers",
        "program -> local_variable_declaration -> IteratorSetting",
        "program -> local_variable_declaration -> variable_declarator -> is",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> IteratorSetting",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> iteratorCount",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> binary_expression -> field_access -> PrimitiveComparisonFilter.FILTER_PREFIX",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> binary_expression -> field_access -> PrimitiveComparisonFilter.FILTER_PREFIX",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> binary_expression -> iteratorCount",
        "program -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list -> class_literal -> PrimitiveComparisonFilter",
        "program -> local_variable_declaration -> modifiers",
        "program -> local_variable_declaration -> String",
        "program -> local_variable_declaration -> variable_declarator -> type",
        "program -> local_variable_declaration -> variable_declarator -> ternary_expression -> binaryEncodedValues",
        "program -> local_variable_declaration -> variable_declarator -> ternary_expression -> method_invocation -> method_invocation -> sc",
        "program -> local_variable_declaration -> variable_declarator -> ternary_expression -> method_invocation -> method_invocation -> getColumnDesc",
        "program -> local_variable_declaration -> variable_declarator -> ternary_expression -> method_invocation -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> variable_declarator -> ternary_expression -> method_invocation -> getTypeString",
        "program -> local_variable_declaration -> variable_declarator -> ternary_expression -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> variable_declarator -> ternary_expression -> method_invocation -> field_access -> ColumnEncoding.STRING",
        "program -> local_variable_declaration -> variable_declarator -> ternary_expression -> method_invocation -> field_access -> ColumnEncoding.STRING",
        "program -> local_variable_declaration -> variable_declarator -> ternary_expression -> method_invocation -> getName",
        "program -> local_variable_declaration -> variable_declarator -> ternary_expression -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> modifiers",
        "program -> local_variable_declaration -> String",
        "program -> local_variable_declaration -> variable_declarator -> comparisonOpStr",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> sc",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getComparisonOp",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> PushdownTuple",
        "program -> local_variable_declaration -> variable_declarator -> tuple",
        "program -> try_statement -> block -> expression_statement -> assignment_expression -> tuple",
        "program -> try_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> PushdownTuple",
        "program -> try_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> argument_list -> sc",
        "program -> try_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> argument_list -> method_invocation -> getPrimitiveComparison",
        "program -> try_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> argument_list -> method_invocation -> argument_list -> type",
        "program -> try_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> argument_list -> method_invocation -> argument_list -> sc",
        "program -> try_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> argument_list -> method_invocation -> getCompareOp",
        "program -> try_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> argument_list -> method_invocation -> argument_list -> comparisonOpStr",
        "program -> try_statement -> block -> expression_statement -> assignment_expression -> object_creation_expression -> argument_list -> method_invocation -> argument_list -> sc",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> NoSuchPrimitiveComparisonException",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> SerDeException",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"No configured PrimitiveComparison class for \"",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> type",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> e",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> NoSuchCompareOpException",
        "program -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> SerDeException",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"No configured CompareOp class for \"",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> comparisonOpStr",
        "program -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> e",
        "program -> expression_statement -> method_invocation -> is",
        "program -> expression_statement -> method_invocation -> addOption",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> PrimitiveComparisonFilter.P_COMPARE_CLASS",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> PrimitiveComparisonFilter.P_COMPARE_CLASS",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> method_invocation -> tuple",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> method_invocation -> getpCompare",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> getClass",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getName",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> is",
        "program -> expression_statement -> method_invocation -> addOption",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> PrimitiveComparisonFilter.COMPARE_OPT_CLASS",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> PrimitiveComparisonFilter.COMPARE_OPT_CLASS",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> method_invocation -> tuple",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> method_invocation -> getcOpt",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> getClass",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getName",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> is",
        "program -> expression_statement -> method_invocation -> addOption",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> PrimitiveComparisonFilter.CONST_VAL",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> PrimitiveComparisonFilter.CONST_VAL",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> Base64",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> getEncoder",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> encodeToString",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> tuple",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> getConstVal",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> expression_statement -> method_invocation -> is",
        "program -> expression_statement -> method_invocation -> addOption",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> PrimitiveComparisonFilter.COLUMN",
        "program -> expression_statement -> method_invocation -> argument_list -> field_access -> PrimitiveComparisonFilter.COLUMN",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> accumuloColumnMapping",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> serialize",
        "program -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> return_statement -> is"
    ],
    "toString": [
        "program -> return_statement -> name"
    ],
    "uncheckedGetField": [
        "program -> local_variable_declaration -> array_type -> LazyObjectBase",
        "program -> local_variable_declaration -> array_type -> dimensions",
        "program -> local_variable_declaration -> variable_declarator -> fields",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getFields",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> local_variable_declaration -> array_type -> boolean",
        "program -> local_variable_declaration -> array_type -> dimensions",
        "program -> local_variable_declaration -> variable_declarator -> fieldsInited",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> getFieldInited",
        "program -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> array_access -> fieldsInited",
        "program -> if_statement -> parenthesized_expression -> unary_expression -> array_access -> fieldID",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> array_access -> fieldsInited",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> array_access -> fieldID",
        "program -> if_statement -> block -> expression_statement -> assignment_expression -> true",
        "program -> if_statement -> block -> local_variable_declaration -> ColumnMapping",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> colMap",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> array_access -> columnsMapping",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> array_access -> fieldID",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> unary_expression -> field_access -> colMap.hbaseRowKey",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> unary_expression -> field_access -> colMap.hbaseRowKey",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> unary_expression -> field_access -> colMap.hbaseTimestamp",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> unary_expression -> field_access -> colMap.hbaseTimestamp",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> field_access -> colMap.qualifierName",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> field_access -> colMap.qualifierName",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> null",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> parenthesized_expression -> cast_expression -> LazyHBaseCellMap",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> parenthesized_expression -> cast_expression -> array_access -> fields",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> parenthesized_expression -> cast_expression -> array_access -> fieldID",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> init",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> result",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> colMap.familyNameBytes",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> colMap.familyNameBytes",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> colMap.binaryStorage",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> colMap.binaryStorage",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> colMap.qualifierPrefixBytes",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> colMap.qualifierPrefixBytes",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> colMap",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> isDoPrefixCut",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> method_invocation -> array_access -> fields",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> method_invocation -> array_access -> fieldID",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> method_invocation -> getObject",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> field_access -> colMap.hbaseTimestamp",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> field_access -> colMap.hbaseTimestamp",
        "program -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> integral_type",
        "program -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> timestamp",
        "program -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> array_access -> method_invocation -> result",
        "program -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> array_access -> method_invocation -> rawCells",
        "program -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> array_access -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> array_access -> 0",
        "program -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> getTimestamp",
        "program -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> block -> for_statement -> local_variable_declaration -> integral_type",
        "program -> if_statement -> block -> if_statement -> block -> for_statement -> local_variable_declaration -> variable_declarator -> i",
        "program -> if_statement -> block -> if_statement -> block -> for_statement -> local_variable_declaration -> variable_declarator -> 1",
        "program -> if_statement -> block -> if_statement -> block -> for_statement -> binary_expression -> i",
        "program -> if_statement -> block -> if_statement -> block -> for_statement -> binary_expression -> field_access -> method_invocation -> result",
        "program -> if_statement -> block -> if_statement -> block -> for_statement -> binary_expression -> field_access -> method_invocation -> rawCells",
        "program -> if_statement -> block -> if_statement -> block -> for_statement -> binary_expression -> field_access -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> block -> for_statement -> binary_expression -> field_access -> result.rawCells().length",
        "program -> if_statement -> block -> if_statement -> block -> for_statement -> update_expression -> i",
        "program -> if_statement -> block -> if_statement -> block -> for_statement -> block -> expression_statement -> assignment_expression -> timestamp",
        "program -> if_statement -> block -> if_statement -> block -> for_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> Math",
        "program -> if_statement -> block -> if_statement -> block -> for_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> max",
        "program -> if_statement -> block -> if_statement -> block -> for_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> timestamp",
        "program -> if_statement -> block -> if_statement -> block -> for_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> method_invocation -> array_access -> method_invocation -> result",
        "program -> if_statement -> block -> if_statement -> block -> for_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> method_invocation -> array_access -> method_invocation -> rawCells",
        "program -> if_statement -> block -> if_statement -> block -> for_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> method_invocation -> array_access -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> block -> for_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> method_invocation -> array_access -> i",
        "program -> if_statement -> block -> if_statement -> block -> for_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> method_invocation -> getTimestamp",
        "program -> if_statement -> block -> if_statement -> block -> for_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> LazyObjectBase",
        "program -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> lz",
        "program -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> array_access -> fields",
        "program -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> array_access -> fieldID",
        "program -> if_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> instanceof_expression -> lz",
        "program -> if_statement -> block -> if_statement -> block -> if_statement -> parenthesized_expression -> instanceof_expression -> LazyTimestamp",
        "program -> if_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> parenthesized_expression -> cast_expression -> LazyTimestamp",
        "program -> if_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> parenthesized_expression -> cast_expression -> lz",
        "program -> if_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> getWritableObject",
        "program -> if_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> set",
        "program -> if_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> Timestamp",
        "program -> if_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> ofEpochMilli",
        "program -> if_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> timestamp",
        "program -> if_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> parenthesized_expression -> cast_expression -> LazyLong",
        "program -> if_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> parenthesized_expression -> cast_expression -> lz",
        "program -> if_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> getWritableObject",
        "program -> if_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> set",
        "program -> if_statement -> block -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> timestamp",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> method_invocation -> lz",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> method_invocation -> getObject",
        "program -> if_statement -> block -> if_statement -> block -> return_statement -> method_invocation -> argument_list",
        "program -> if_statement -> block -> local_variable_declaration -> array_type -> integral_type",
        "program -> if_statement -> block -> local_variable_declaration -> array_type -> dimensions",
        "program -> if_statement -> block -> local_variable_declaration -> variable_declarator -> bytes",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> field_access -> colMap.hbaseRowKey",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> field_access -> colMap.hbaseRowKey",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> bytes",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> result",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> getRow",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> bytes",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> result",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> getValue",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> field_access -> colMap.familyNameBytes",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> field_access -> colMap.familyNameBytes",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> field_access -> colMap.qualifierNameBytes",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> field_access -> colMap.qualifierNameBytes",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> bytes",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> binary_expression -> null",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> isNull",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> method_invocation -> oi",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> method_invocation -> getNullSequence",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> bytes",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> 0",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> field_access -> bytes.length",
        "program -> if_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> field_access -> bytes.length",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> array_access -> fields",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> array_access -> fieldID",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> setNull",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list",
        "program -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> ByteArrayRef",
        "program -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> ref",
        "program -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> ByteArrayRef",
        "program -> if_statement -> block -> if_statement -> block -> local_variable_declaration -> variable_declarator -> object_creation_expression -> argument_list",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> ref",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> setData",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> bytes",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> array_access -> fields",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> array_access -> fieldID",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> init",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> ref",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> 0",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> bytes.length",
        "program -> if_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> field_access -> bytes.length",
        "program -> return_statement -> method_invocation -> array_access -> fields",
        "program -> return_statement -> method_invocation -> array_access -> fieldID",
        "program -> return_statement -> method_invocation -> getObject",
        "program -> return_statement -> method_invocation -> argument_list"
    ],
    "updateConfWithAccumuloToken": [
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> getAccumuloToken",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list -> currentUser",
        "program -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> addTokenFromUserToJobConf",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> currentUser",
        "program -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> jobConf",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> Connector",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> variable_declarator -> connector",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> cnxnParams",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> getConnector",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> AuthenticationToken",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> variable_declarator -> token",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> getDelegationToken",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> connector",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> parenthesized_expression -> isInputFormat",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> setInputFormatConnectorInfo",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> jobConf",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> cnxnParams",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getAccumuloUserName",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> token",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> setOutputFormatConnectorInfo",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> jobConf",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> cnxnParams",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getAccumuloUserName",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> token",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> generic_type -> Token",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> generic_type -> type_arguments -> wildcard -> TokenIdentifier",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> variable_declarator -> accumuloToken",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> getHadoopToken",
        "program -> if_statement -> block -> try_statement -> block -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> token",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> mergeTokenIntoJobConf",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> jobConf",
        "program -> if_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> accumuloToken",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> currentUser",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> addToken",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> parenthesized_expression -> unary_expression -> method_invocation -> argument_list -> accumuloToken",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> throw_statement -> object_creation_expression -> IOException",
        "program -> if_statement -> block -> try_statement -> block -> if_statement -> block -> throw_statement -> object_creation_expression -> argument_list -> \"Failed to add Accumulo Token to UGI\"",
        "program -> if_statement -> block -> try_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> addTokenFromUserToJobConf",
        "program -> if_statement -> block -> try_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> currentUser",
        "program -> if_statement -> block -> try_statement -> block -> try_statement -> block -> expression_statement -> method_invocation -> argument_list -> jobConf",
        "program -> if_statement -> block -> try_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> IOException",
        "program -> if_statement -> block -> try_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> if_statement -> block -> try_statement -> block -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> IOException",
        "program -> if_statement -> block -> try_statement -> block -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"Current user did not contain necessary delegation Tokens \"",
        "program -> if_statement -> block -> try_statement -> block -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> currentUser",
        "program -> if_statement -> block -> try_statement -> block -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> e",
        "program -> if_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> AccumuloException",
        "program -> if_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> catch_type -> AccumuloSecurityException",
        "program -> if_statement -> block -> try_statement -> catch_clause -> catch_formal_parameter -> e",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> IOException",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> \"Failed to acquire Accumulo DelegationToken\"",
        "program -> if_statement -> block -> try_statement -> catch_clause -> block -> throw_statement -> object_creation_expression -> argument_list -> e"
    ],
    "updateInputFormatConfWithAccumuloToken": [
        "program -> expression_statement -> method_invocation -> updateConfWithAccumuloToken",
        "program -> expression_statement -> method_invocation -> argument_list -> jobConf",
        "program -> expression_statement -> method_invocation -> argument_list -> currentUser",
        "program -> expression_statement -> method_invocation -> argument_list -> cnxnParams",
        "program -> expression_statement -> method_invocation -> argument_list -> true"
    ],
    "updateOutputFormatConfWithAccumuloToken": [
        "program -> expression_statement -> method_invocation -> updateConfWithAccumuloToken",
        "program -> expression_statement -> method_invocation -> argument_list -> jobConf",
        "program -> expression_statement -> method_invocation -> argument_list -> currentUser",
        "program -> expression_statement -> method_invocation -> argument_list -> cnxnParams",
        "program -> expression_statement -> method_invocation -> argument_list -> false"
    ],
    "useMockInstance": [
        "program -> expression_statement -> method_invocation -> Preconditions",
        "program -> expression_statement -> method_invocation -> checkNotNull",
        "program -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> return_statement -> method_invocation -> conf",
        "program -> return_statement -> method_invocation -> getBoolean",
        "program -> return_statement -> method_invocation -> argument_list -> USE_MOCK_INSTANCE",
        "program -> return_statement -> method_invocation -> argument_list -> false"
    ],
    "useSasl": [
        "program -> expression_statement -> method_invocation -> Preconditions",
        "program -> expression_statement -> method_invocation -> checkNotNull",
        "program -> expression_statement -> method_invocation -> argument_list -> conf",
        "program -> return_statement -> method_invocation -> conf",
        "program -> return_statement -> method_invocation -> getBoolean",
        "program -> return_statement -> method_invocation -> argument_list -> SASL_ENABLED",
        "program -> return_statement -> method_invocation -> argument_list -> false"
    ],
    "writeWithLevel": [
        "program -> switch_expression -> parenthesized_expression -> method_invocation -> oi",
        "program -> switch_expression -> parenthesized_expression -> method_invocation -> getCategory",
        "program -> switch_expression -> parenthesized_expression -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> PRIMITIVE",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> mapping",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> getEncoding",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> parenthesized_expression -> binary_expression -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> parenthesized_expression -> binary_expression -> field_access -> ColumnEncoding.BINARY",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> parenthesized_expression -> binary_expression -> field_access -> ColumnEncoding.BINARY",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> expression_statement -> method_invocation -> this",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> expression_statement -> method_invocation -> writeBinary",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> output",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> value",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> cast_expression -> PrimitiveObjectInspector",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> cast_expression -> oi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> expression_statement -> method_invocation -> this",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> expression_statement -> method_invocation -> writeString",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> output",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> value",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> cast_expression -> PrimitiveObjectInspector",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> cast_expression -> oi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> LIST",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> integral_type",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> separator",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> integral_type",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> array_access -> method_invocation -> serDeParams",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> array_access -> method_invocation -> getSeparators",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> array_access -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> array_access -> level",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> ListObjectInspector",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> loi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> ListObjectInspector",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> oi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> generic_type -> List",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> generic_type -> type_arguments -> wildcard",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> method_invocation -> loi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> method_invocation -> getList",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> value",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> ObjectInspector",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> eoi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> method_invocation -> loi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> method_invocation -> getListElementObjectInspector",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> parenthesized_expression -> binary_expression -> list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> expression_statement -> method_invocation -> log",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> expression_statement -> method_invocation -> debug",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> \"No objects found when serializing list\"",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> return_statement",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> local_variable_declaration -> integral_type",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> local_variable_declaration -> variable_declarator -> i",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> local_variable_declaration -> variable_declarator -> 0",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> binary_expression -> i",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> binary_expression -> method_invocation -> list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> binary_expression -> method_invocation -> size",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> binary_expression -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> update_expression -> i",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> i",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> 0",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> output",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> write",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> separator",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> writeWithLevel",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> eoi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> get",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> i",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> output",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> mapping",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> level",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> 1",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> MAP",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> integral_type",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> sep",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> integral_type",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> array_access -> method_invocation -> serDeParams",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> array_access -> method_invocation -> getSeparators",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> array_access -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> array_access -> level",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> integral_type",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> keyValueSeparator",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> integral_type",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> array_access -> method_invocation -> serDeParams",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> array_access -> method_invocation -> getSeparators",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> array_access -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> array_access -> binary_expression -> level",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> array_access -> binary_expression -> 1",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> MapObjectInspector",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> moi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> MapObjectInspector",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> oi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> ObjectInspector",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> koi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> method_invocation -> moi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> method_invocation -> getMapKeyObjectInspector",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> ObjectInspector",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> voi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> method_invocation -> moi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> method_invocation -> getMapValueObjectInspector",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> generic_type -> Map",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> generic_type -> type_arguments -> wildcard",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> generic_type -> type_arguments -> wildcard",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> map",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> method_invocation -> moi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> method_invocation -> getMap",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list -> value",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> parenthesized_expression -> binary_expression -> map",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> expression_statement -> method_invocation -> log",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> expression_statement -> method_invocation -> debug",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> \"No object found when serializing map\"",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> return_statement",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> local_variable_declaration -> boolean",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> local_variable_declaration -> variable_declarator -> first",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> local_variable_declaration -> variable_declarator -> true",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> generic_type -> scoped_type_identifier -> Map",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> generic_type -> scoped_type_identifier -> Entry",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> generic_type -> type_arguments -> wildcard",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> generic_type -> type_arguments -> wildcard",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> entry",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> method_invocation -> map",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> method_invocation -> entrySet",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> parenthesized_expression -> first",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> first",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> assignment_expression -> false",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> output",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> write",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> sep",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> writeWithLevel",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> koi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> entry",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getKey",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> output",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> mapping",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> level",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> 2",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> output",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> write",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> keyValueSeparator",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> writeWithLevel",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> voi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> entry",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getValue",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> output",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> mapping",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> level",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> enhanced_for_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> 2",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label -> STRUCT",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> expression_statement -> assignment_expression -> sep",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> expression_statement -> assignment_expression -> cast_expression -> integral_type",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> expression_statement -> assignment_expression -> cast_expression -> array_access -> method_invocation -> serDeParams",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> expression_statement -> assignment_expression -> cast_expression -> array_access -> method_invocation -> getSeparators",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> expression_statement -> assignment_expression -> cast_expression -> array_access -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> expression_statement -> assignment_expression -> cast_expression -> array_access -> level",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> StructObjectInspector",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> soi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> StructObjectInspector",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> cast_expression -> oi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> generic_type -> List",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> generic_type -> type_arguments -> wildcard -> StructField",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> fields",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> method_invocation -> soi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> method_invocation -> getAllStructFieldRefs",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> local_variable_declaration -> variable_declarator -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> expression_statement -> assignment_expression -> list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> expression_statement -> assignment_expression -> method_invocation -> soi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> expression_statement -> assignment_expression -> method_invocation -> getStructFieldsDataAsList",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> expression_statement -> assignment_expression -> method_invocation -> argument_list -> value",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> parenthesized_expression -> binary_expression -> list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> parenthesized_expression -> binary_expression -> null",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> expression_statement -> method_invocation -> log",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> expression_statement -> method_invocation -> debug",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> \"No object found when serializing struct\"",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> return_statement",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> local_variable_declaration -> integral_type",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> local_variable_declaration -> variable_declarator -> i",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> local_variable_declaration -> variable_declarator -> 0",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> binary_expression -> i",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> binary_expression -> method_invocation -> list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> binary_expression -> method_invocation -> size",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> binary_expression -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> update_expression -> i",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> i",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> if_statement -> parenthesized_expression -> binary_expression -> 0",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> output",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> write",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> if_statement -> block -> expression_statement -> method_invocation -> argument_list -> sep",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> writeWithLevel",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> fields",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> get",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> method_invocation -> argument_list -> i",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> getFieldObjectInspector",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> list",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> get",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> method_invocation -> argument_list -> i",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> output",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> mapping",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> level",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> if_statement -> block -> for_statement -> block -> expression_statement -> method_invocation -> argument_list -> binary_expression -> 1",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> return_statement",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> switch_label",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> throw_statement -> object_creation_expression -> RuntimeException",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> \"Unknown category type: \"",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> oi",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> getCategory",
        "program -> switch_expression -> switch_block -> switch_block_statement_group -> throw_statement -> object_creation_expression -> argument_list -> binary_expression -> method_invocation -> argument_list"
    ],
    "write": [
        "program -> expression_statement -> method_invocation -> storageFormatTest",
        "program -> expression_statement -> method_invocation -> writeRecords",
        "program -> expression_statement -> method_invocation -> argument_list -> recordWriter",
        "program -> expression_statement -> method_invocation -> argument_list -> recordWritable"
    ]
}